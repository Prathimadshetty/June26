{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<p>Welcome to Application Security Services and guidelines. Purpose of this page is to help engineering teams to build and operate more secure products by incorporating Secuirty into their SDLC.</p>"},{"location":"#ssdlc","title":"SSDLC","text":"<p>Some useful resources involving application security, together with some guidelines on various topics.</p>"},{"location":"#appsec-requirements","title":"AppSec Requirements","text":"<p>Defining requirements is the first step in the software development process. When done properly, it produces applications that meet the needs of a specific audience. Conversely, poorly defined requirements generally lead to applications that do not meet the needs of the target audience, disrupt the development process, and can lead to project failure</p>"},{"location":"#security-design","title":"Security Design","text":"<p>Designing secure applications is more straightforward when requirements are spelled out as suggested above. However, the process is still far from over. Even with the best requirements, software design is a challenging activity and must be performed with great care and clear goals.</p>"},{"location":"#appsec-testing","title":"AppSec Testing","text":"<p>Security testing is different and few functional testing paradigms address the needs of security testing sufficiently. When security is a concern, testers must pay more attention to the software\u2019s operating environment and functional testing of security components must be more intense to compensate for the increased risk associated with those components</p>"},{"location":"#awareness","title":"Awareness","text":"<p>The objective of this section is to give the engineers a short introduction to the topic that will leave them wanting to learn more about it and point them to where they can dig deeper in cyber security.</p>"},{"location":"#objectives","title":"Objectives","text":"<ul> <li>Reduce the vulnerabilities in M&amp;S applications by creating security automation,        collaborating with teams, creating and aiding with SSDLC standards</li> <li>Provide product health metrics and dashboards</li> <li>Strengthen application security through CI/CD using tooling, quality gates</li> <li>Engaging with engineering communities through their SLDC journey by providing Threat Modeling, workshops, Vulnerability Assessments, Remediation support.</li> </ul>"},{"location":"#audience","title":"Audience","text":"<p>Software Engineering Teams at M&amp;S.</p>"},{"location":"AppSec%20Testing/","title":"Application Testing","text":""},{"location":"AppSec%20Testing/#application-testing","title":"Application Testing","text":"<p>Application security testing is the process of analysing, testing, and reporting security vulnerabilities associated with the applications. It helps M&amp;S address the threats by using secure development practices throughout the complete life cycle process. Also, it makes sure that design-level flaws and implementation level bugs go identified and addressed promptly.</p>"},{"location":"AppSec%20Testing/#capabilities","title":"Capabilities","text":"<ul> <li>Threat Modeling</li> <li>Security testing <ul> <li>SAST</li> <li>DAST</li> <li>SCA</li> <li>Secret Scanning</li> <li>IAC</li> <li>Registry Scanning</li> <li>Container security</li> </ul> </li> <li>CI/CD security and tooling</li> <li>Vulnerability Remediation Support</li> </ul>"},{"location":"AppSec%20Testing/ToolsAndServices/","title":"AppSec Tools and Services","text":""},{"location":"AppSec%20Testing/ToolsAndServices/#appsec-tools-and-services","title":"AppSec Tools and Services","text":"<p>...</p> Scan Type Functionality Toolset Static Application Security Testing (SAST): Scan of application source code is conducted FOD Software Composition Analysis (SCA): Scan of third party and open-source components is conducted (Dependency scan) Snyk Dynamic Application Security Testing (DAST): Dynamic scan of web applications is conducted FOD Container and Image Scans Container and Image scans are conducted and provides runtime protection. Prisma Cloud Secret Scan Analyze &amp; find secrets such as private keys, passwords, certificates in the organization\u2019s resource TruffleHog IAC Scanning Infrastructure as a code files are scanned Prisma Cloud Defender for Cloud Cloud Posture management and compliance through secure score scanning Azure Defender for cloud Azure PIM Akamai WAF and DDOS - Volumetric Edge protection for applications Akamai <p>...</p>"},{"location":"AppSec%20Testing/DAST/","title":"Index","text":""},{"location":"AppSec%20Testing/DAST/#dast","title":"DAST","text":"<p>DAST stands for \"Dynamic Application Security Testing\". Emulating a malicious user by attacking and probing, a DAST-tool will test a running web application to detect vulnerabilities.</p> <p>Dynamic Application Security Testing (DAST) will help in identifying the potential application security vulnerabilities like SQL injection, cross site scripting, authentication bypass etc. by seeing how the application responds to specially crafted requests that mimic attacks and provides the remediation steps to mitigate them. The vulnerability assessment is conducted from the exterior, with no access to the application source code architecture, so DAST is considered as a black-box/grey box security approach.</p>"},{"location":"AppSec%20Testing/DAST/#challenges-in-application-security","title":"Challenges In Application Security","text":"<ul> <li>All web application configurations may not be identified by the Secure Code Reviews or SAST</li> <li>The authentication methodologies, database integrations, applications and API interfacing vulnerabilities cannot be identified by SAST or DAST tools</li> <li>Real time mimicking attacks is not possible in SCA or SAST.</li> </ul> <p>Applications are built by people who can make mistakes despite best practices in software development. Application security testing is the way to detect these mistakes.</p>"},{"location":"AppSec%20Testing/DAST/#how-dast-tool-can-help","title":"How DAST Tool can help?","text":"<ul> <li>Black box security test - DAST tool will mimic attacks and uncover vulnerabilities hidden in web applications</li> <li>Security Vulnerabilities - DAST tools identifies the security  vulnerabilities in the Web applications and its platform configuration issues</li> <li>Remediation Support - DAST tools helps in remediating the vulnerable components providing fix recommendations</li> </ul>"},{"location":"AppSec%20Testing/DAST/DAST%20Tool%20and%20Onboarding%20Approach/","title":"DAST Tool and Onboarding Approach","text":"<p>AT M&amp;S we use Fortify on Demand(FOD) for DAST.</p> <ul> <li>FOD can test for various application security vulnerabilities like SQL Injection, XSS etc. when application is up and running</li> <li>FOD DAST can be integrated to CI/CD tool to trigger automatic scans before deploying into production.</li> </ul> <p></p>"},{"location":"AppSec%20Testing/DAST/DAST%20Tool%20and%20Onboarding%20Approach/#tool-onboarding","title":"Tool onboarding","text":"<p>For onboarding applications for FOD DAST, below Prerequisites are required - </p> <p>If it\u2019s website, please share the below details for DAST-</p> <ul> <li>Dynamic Website URL \u2013 non prod URL and 2 test usernames and passwords.</li> <li>Form based Authentication \u2013 credentials (highest privilege test username and password)</li> <li>Scope (directories and sub-directories of web application to scan)</li> <li>Exclusions, if any (directories and sub-directories or third-part domains to exclude)</li> </ul> <p>OR if it\u2019s a webservice  please share the below details</p> <ul> <li>Postman Collection \u2013 (non-prod)</li> <li>Open API JSON file</li> <li>API key</li> <li>Whether the application is external or internal which means if the application\u2019s non prod url is accessible via internet or via M&amp;S internal network</li> <li>Appsec team will test whether the postman collection provided is working fine. The Api must give ideal response while sending it from our end</li> </ul> <p>Post receiving the above details from the application team Appsec shall onboard the application for DAST and share the report.</p>"},{"location":"AppSec%20Testing/DAST/DAST%20Tool%20and%20Onboarding%20Approach/#integration","title":"Integration","text":"<p>Step 1: Store GitHub Username, Personal Access Token and API_KEY and API_SECRET in Keyvault.</p> <p>Step 2: Create a Pipeline.yml with following code</p> <pre><code>task: Bash@3\n  inputs:\n    targetType: 'inline'\n    script: |\n      auth=$(curl -X POST --header 'Content-Type: application/x-www-form-urlencoded' --header 'Connection: close' -d 'grant_type=client_credentials&amp;scope=api-tenant&amp;client_id=$(FOD-API-KEY)&amp;client_secret=$(FOD-SECRET)' 'https://emea.fortify.com/oauth/token')\n                   tok3n=$( echo \"$auth\" | jq '.[\"access_token\"]' )\n                   tok3n=\"${tok3n:1:-1}\"\n                   scan_details=$(curl -X GET --header 'Accept: application/json' --header 'Authorization: Bearer '${tok3n} 'https://api.emea.fortify.com/api/v3/releases/9516/dynamic-scans/scan-setup')\n                   assessmenttypeID=$( echo \"$scan_details\" | jq '.assessmentTypeId')\n                   entitlementID=$( echo \"$scan_details\" | jq '.entitlementId')\n                   curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' --header 'Authorization: Bearer '${tok3n} -d '{\"startDate\": \"2022-0820T05:35:23.645Z\", \"assessmentTypeId\": ${assessmenttypeID}, \"entitlementId\": ${entitlementID}, \"entitlementFrequencyType\": \"Subscription\", \"isRemediationScan\": false, \"isBundledAssessment\": false, \"parentAssessmentTypeId\": 0, \"applyPreviousScanSettings\": false, \"scanMethodType\": \"IDE\", \"scanTool\": \"string\", \"scanToolVersion\": \"string\"}' 'https://api.emea.fortify.com/api/v3/releases/9516/dynamic-scans/start-scan'\n</code></pre> <p>Note- DAST integration should be at CD phase.</p>"},{"location":"AppSec%20Testing/DAST/DAST%20Tool%20and%20Onboarding%20Approach/#architecture","title":"Architecture","text":""},{"location":"AppSec%20Testing/SAST/","title":"SAST","text":""},{"location":"AppSec%20Testing/SAST/#sast","title":"SAST","text":"<p>SAST Stands for \"Static Application Security Testing\".  SAST can take place very early in the SDLC, as it does not require a working application.</p> <p>SAST-tool will report on known vulnerabilities and security misconfigurations in your code. Catching these things early, dramatically decrease the cost of fixing these issues.</p> <p>There are different ways of implementing SAST-tools into the SDLC: * Periodic full scans on the codebase * Having a plugin present in your dev-environment (IDE) to catch issues as you code * Integrate the tool in the devops pipeline.</p>"},{"location":"AppSec%20Testing/SAST/#challenges-in-securing-coding","title":"Challenges In Securing Coding","text":"<ul> <li>High chance of developer missing to implement secure coding guidelines during development </li> <li>All developers are not competent of secure coding</li> <li>It is difficult to remember security configurations, encryptions methods, and vulnerable components.</li> </ul> <p>Secure coding is the practice of developing computer software in a way that guards against the accidental introduction of security vulnerabilities. Defects, bugs and logic flaws are consistently the primary cause of commonly exploited software vulnerabilities. SAST tools are there to detect them.</p>"},{"location":"AppSec%20Testing/SAST/#how-sast-tool-can-help","title":"How SAST Tool can help?","text":"<ul> <li>White box security test - SAST tool will have full visibility into all code and uncover vulnerabilities hidden in code</li> <li>Security Vulnerabilities - SAST tools identifies the security  vulnerabilities in the code developed by the developer</li> <li>Remediation Support - SAST tools helps in remediating the vulnerable components providing fix recommendations</li> </ul>"},{"location":"AppSec%20Testing/SAST/SAST%20-%20IDE%20Plugin/","title":"SAST   IDE Plugin","text":"<p>This document provides user guidance to use Fortify Security assistant IDE plugins with IDEs Eclipse, Visual Studio and IntelliJ &amp; Android Studio.</p> <pre><code>For any queries reach out to AppSec  DL - InfoSec - Cloud-DevOps-Security &lt;DL-Infosec-Cloud-DevOps-Security@marks-and-spencer.com&gt;\n</code></pre>"},{"location":"AppSec%20Testing/SAST/SAST%20-%20IDE%20Plugin/#fortify-security-assistant-plugin-for-eclipse","title":"Fortify Security Assistant Plugin for Eclipse","text":"<p>Requirements -</p> <p>a. A valid license file from Fortify- M&amp;S authorized users can download the license file from the below fortify portal-</p> <p>https://emea.fortify.com/Tools/Downloads</p> <p>IMAGE</p> <p>b. Fortify_SecurityAssistant_Eclipse_Plugin - Download the plugin from the below website-</p> <p>https://marketplace.microfocus.com/cyberres/content/fortify-security-assistant-for-eclipse</p>"},{"location":"AppSec%20Testing/SAST/SAST%20-%20IDE%20Plugin/#to-install-fortify-security-assistant-for-eclipse","title":"To install Fortify Security Assistant for Eclipse:","text":"<ol> <li>Start Eclipse.</li> <li>Select Help &gt; Install New Software.</li> </ol> <p>The Install wizard starts and displays the Available Software step.</p> <ol> <li> <p>Click Add.</p> </li> <li> <p>Click Archive, and then locate and select Fortify_SecurityAssistant_Eclipse_Plugin_.zip. </p> </li> <li> <p>Click Add.</p> </li> <li> <p>Select the Fortify Security Assistant Plugin check box.</p> </li> </ol> <p>IMAGE</p> <ol> <li>CLick Next.</li> </ol> <p>The Install Details step lists Fortify Security Assistant Plugin For Eclipse.</p> <p>To view version and copyright information about the plugin in the Details area, click the plugin name.</p> <ol> <li>Click Next.</li> <li>On the Review Licenses step, review and accept the license agreement.</li> <li>Click Finish.</li> <li>To complete the installation and restart Eclipse, click Restart Now when prompted.</li> </ol> <p>The menu bar now includes the Fortify menu.</p> <p>IMAGE 12. In the Locate Fortify License File dialog box, click Browse.</p> <ol> <li>Navigate to the fortify.license file, and then click OK.</li> </ol>"},{"location":"AppSec%20Testing/SAST/SAST%20-%20IDE%20Plugin/#to-review-the-security-issues","title":"To review the security issues:","text":"<p>Click on Open Security issues list under Fortify tab as shown below and place your cursor over the highlighted code to open a tooltip that displays one or more issues. Move your cursor into the Fortify Security Assistant for Eclipse tooltip or press F2 to access additional options.</p> <p>IMAGE</p> <p>You can also use Fortify Security Assistant for Eclipse to examine a project and identify any security issues.</p> <p>To scan a project for issues:</p> <p>Right-click the project name, and then select Inspect the Project.</p> <p>IMAGE</p>"},{"location":"AppSec%20Testing/SAST/SAST%20-%20IDE%20Plugin/#fortify-security-assistant-plugin-for-visual-studio","title":"Fortify Security Assistant Plugin for Visual Studio","text":"<p>Requirements -</p> <p>a. A valid license file from Fortify- M&amp;S authorized users can download the license file from the below fortify portal-</p> <p>https://emea.fortify.com/Tools/Downloads</p> <p>IMAGE</p> <pre><code>Note: To install this extension as an administrator and allow all users to use the extension, download the VSIX file from the Visual Studio Marketplace and then install it using VSIXInstaller with the /admin option from the Command Prompt.\n</code></pre>"},{"location":"AppSec%20Testing/SAST/SAST%20-%20IDE%20Plugin/#to-install-the-fortify-security-assistant-extension","title":"To install the Fortify Security Assistant extension:","text":"<ol> <li>In Visual Studio, select Extensions &gt; Manage Extensions.</li> <li>Search the Visual Studio Marketplace for Fortify Security Assistant.</li> <li>Download and install Fortify Security Assistant for Visual Studio. IMAGE The first time you install the extension, you are prompted to provide a license file and Micro Focus Fortify Software security content(select the default one like below).</li> </ol> <p>IMAGE</p>"},{"location":"AppSec%20Testing/SAST/SAST%20-%20IDE%20Plugin/#to-review-the-security-issues_1","title":"To review the security issues:","text":"<p>Pause your cursor over the highlighted code to open a tooltip that briefly describes the issue as shown in the following example: </p> <p>IMAGE</p> <p>Open the Error List window (the Warnings tab) to see possible security issues in open files.</p> <p>You can also analyze a solution and identify security issues. You cannot make any code changes during the analysis.</p> <p>To scan a solution for issues:</p> <p>From the Fortify Security Assistant extension menu, select Analyze Solution as shown below</p> <p>IMAGE</p>"},{"location":"AppSec%20Testing/SAST/SAST%20-%20IDE%20Plugin/#fortify-security-assistant-plugin-for-intellij-and-android-studio","title":"Fortify Security Assistant Plugin for IntelliJ and Android Studio","text":"<p>Requirements -</p> <p>a. A valid license file from Fortify- M&amp;S authorized users can download the license file from the below fortify portal-</p> <p>https://emea.fortify.com/Tools/Downloads</p> <p>IMAGE</p> <p>You can install Fortify Security Assistant on Windows, Linux, and macOS. The Fortify Security Assistant plugin is available for download from the JetBrains Marketplace.</p> <p>To install Fortify Security Assistant:</p> <ol> <li>Start IntelliJ IDEA or Android Studio.</li> <li> <p>Open the Settings dialog box as follows:</p> </li> <li> <p>On Windows or Linux, select File &gt; Settings.</p> </li> <li> <p>On macOS, select  &gt; Preferences.</p> </li> <li> <p>On the left pane, select Plugins.</p> </li> <li>Select the Marketplace tab, and then in the search box type Fortify Security Assistant.</li> <li>Click Install.</li> <li>Click OK.</li> </ol>"},{"location":"AppSec%20Testing/SAST/SAST%20-%20IDE%20Plugin/#to-configure-fortify-security-assistant","title":"To configure Fortify Security Assistant:","text":"<ol> <li>Open the Settings dialog box as follows:</li> </ol> <p>On Windows or Linux, select File &gt; Settings.</p> <p>On macOS, select  &gt; Preferences.</p> <ol> <li> <p>In the search box, type fortify.</p> </li> <li> <p>Select Fortify Security Assistant in the left pane.</p> </li> </ol> <p>IMAGE</p> <ol> <li>To specify the license file, click Browse to the right of the License file box and navigate to the license file (fortify.license) on your system.</li> <li>To load or update Fortify security content stored locally:</li> </ol> <p>Select Use local Rulepack.</p> <p>Click Browse next to the Folder box and navigate to a folder on your system that contains the Rulepacks.</p> <p>The selected folder must contain Rulepacks as ZIP, XML, or BIN files.</p> <p>Click Load Security Content.</p> <ol> <li> <p>To download Fortify security content from a Rulepack update server or from Fortify Software Security Center:</p> </li> <li> <p>Select Use security content server.</p> </li> <li> <p>To download security content from the Fortify Rulepack update server, in the URL box, type a Rulepack server URL.</p> </li> <li> <p>The default is the Fortify Rulepack update server URL (https://update.fortify.com).</p> </li> </ol> <p>Note: Click Default to set the URL to the default Fortify Rulepack update server.</p> <ul> <li>To download security content from Fortify Software Security Center:</li> </ul> <p>In the URL box, type a Fortify Software Security Center URL.</p> <p>Select the Software Security Center check box.</p> <ul> <li>To use a proxy for connection to the security content server, select Use proxy, and then provide the following:</li> </ul> <p>The proxy server host name (for example, my.proxy.com)</p> <p>The proxy port number</p> <p>(Optional) Authentication credentials for the proxy server</p> <ul> <li>Click Check for Updates. Note: If you get an error that indicates the downloaded security content is unverified, you might have an invalid license file. Contact Micro Focus Fortify Customer Support for assistance.</li> </ul>"},{"location":"AppSec%20Testing/SAST/SAST%20-%20IDE%20Plugin/#to-review-the-security-issues_2","title":"To review the security issues:","text":"<p>To see a detailed description of an issue, from the code editor or the Fortify Security Assistant window, right-click the issue, and then select View Vulnerability Details.</p> <p>The Vulnerability Details window provides a detailed description of the issue, examples, and recommendations of how to fix the issue.</p> <ol> <li>Click OK.</li> </ol> <p>IMAGE</p> <p>You can also use Fortify Security Assistant to analyze the whole project (or a specific set of files) and identify security issues. You cannot make any code changes during the analysis.</p> <p>To scan a project for issues, perform a code inspection as follows:</p> <ul> <li> <p>In IntelliJ IDEA, select Code &gt; Inspect Code.</p> </li> <li> <p>In Android Studio, select Analyze &gt; Inspect Code.</p> </li> </ul>"},{"location":"AppSec%20Testing/SAST/SAST%20Tool%20and%20CI%20Integration/","title":"SAST Tool and CI Integration","text":"<p>At M&amp;S Fortify On Demand(FOD) is being used for Static Application Security Testing (SAST). </p> <p>Fortify On Demand Analyzes the Source code for Application security vulnerabilities. Static Application Security Testing (SAST) can be integrated to CI/CD to trigger scan when a build process is initiated</p> <p></p>"},{"location":"AppSec%20Testing/SAST/SAST%20Tool%20and%20CI%20Integration/#integration-steps","title":"Integration steps:","text":""},{"location":"AppSec%20Testing/SAST/SAST%20Tool%20and%20CI%20Integration/#azure-devops","title":"Azure Devops:","text":"<p>Step 1: Store GitHub Username, Personal Access Token  and API_KEY and API_SECRET in Azure Keyvault.</p> <p>Step 2: Create a Pipeline.yml with following code</p> <pre><code># Starter pipeline\n\u200b\n# Start with a minimal pipeline that you can customize to build and deploy your code.\n# Add steps that build, run tests, deploy, and more:\n# https://aka.ms/yaml\n\u200b\ntrigger: none\n\u200b\njobs:\n- job: FOD_Scanning\n  pool:\n    name: poc-2-test\n  steps:\n\u200b\n\u200b\n  - task: Bash@3\n    inputs:\n      targetType: 'inline'\n      script: |\n        wget -c https://github.com/fod-dev/fod-uploader-java/releases/download/v5.4.0/FodUpload.jar\n        pwd\n        ls -lrt\n\n  - task: Bash@3\n    inputs:\n      targetType: 'inline'\n      script: |\n        apt install zip\n        zip -r 'WebGoat-develop.zip' .\n\n  - task: AzureKeyVault@1\n    inputs:\n      azureSubscription: 'AzureResourceManager'\n      KeyVaultName: 'cicd-v2-shared-kv'\n      SecretsFilter: '*'\n      RunAsPreJob: false\n  - task: Bash@3\n    inputs:\n      targetType: 'inline'\n      script: |\n        java -jar FodUpload.jar -ac $(FOD-API-KEY) $(FOD-API-SECRET) -rid $(RELEASE-ID) -purl $(FOD-PORTAL-URL) -apiurl $(FOD-API-URL) -z WebGoat-develop.zip -ep 2 -rp 0 -pp 1 -apf -I 1\n    displayName: 'FOD SAST Scan'\n\n  - task: Bash@3\n    inputs:\n      targetType: 'inline'\n      script: |\n             auth=$(curl -X POST --header 'Content-Type: application/x-www-form-urlencoded' --header 'Connection: close' -d 'grant_type=client_credentials&amp;scope=api-tenant&amp;client_id=$(FOD-API-KEY)&amp;client_secret=$(FOD-API-SECRET)' 'https://api.emea.fortify.com/oauth/token')\n             tok3n=$( echo \"$auth\" | jq '.[\"access_token\"]' )\n             tok3n=\"${tok3n:1:-1}\"\n             releasedetails=$(curl -X GET --header 'Accept: application/json' --header 'Authorization: Bearer '${tok3n} 'https://api.emea.fortify.com/api/v3/releases/'$(RELEASE-ID))\n             scanid=$( echo \"$releasedetails\" | jq .currentStaticScanId )\n             applicationname=$( echo \"$releasedetails\" | jq .applicationName | sed 's/[\"]//g')\n             scanSummary=$(curl -X GET --header 'Accept: application/json' --header 'Authorization: Bearer '${tok3n} 'https://api.emea.fortify.com/api/v3/scans/'${scanid}'/summary')\n             CRITICAL=$( echo \"$releasedetails\" | jq .staticCritical )\n             HIGH=$( echo \"$releasedetails\" | jq .staticHigh )\n             if [ $CRITICAL -gt 0 ]\n             then\n               echo \"##[error]Application has critical Issues\"\n               curl -H 'Content-Type: application/json' -d '{\"text\": \"Pipeline had warnings because critical issues in FoD SAST are present for '$applicationname'\"}' $(teams_webhook)\n               #exit 1\n             elif [ $HIGH -gt 0 ]\n             then\n               echo \"##[error]Application has High Issues\"\n               curl -H 'Content-Type: application/json' -d '{\"text\": \"Pipeline had warnings because high issues in FoD SAST are present for '$applicationname'\"}' $(teams_webhook)\n               #exit 1\n             else\n               echo \"PASSED\"\n             fi\n    continueOnError: true           \n    displayName: 'FOD Security Gating'\n</code></pre> <p>FOD-PORTAL-URL - https://emea.fortify.com/</p> <p>FOD-API-URL   -   https://api.emea.fortify.com/</p> <pre><code>Note: To enforce security gating in block mode please uncomment exit code 1.\n</code></pre> <p>Sample Output:-</p> <p>1) After the scanning is completed, if the code has Critical or High security vulnerabilities, the job status will give an alert because of Security Gating Implementation. Please refer the below screenshot</p> <p>IMAGE</p> <p>To Resolve or Validate security vulnerabilities:-</p> <p>To validate or Resolve any security vulnerabilities after scanning the code in any CI/CD pipeline. Open that Application in Fortify on demand portal and check the last build run details. It will explain about each vulnerabilities clearly.</p>"},{"location":"AppSec%20Testing/SAST/SAST%20Tool%20and%20CI%20Integration/#github-actions","title":"Github Actions","text":"<pre><code>Fortify:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: DigitalInnovation/cloud-devsecops-pipelineactions/workflows/appsec/fortify@v1.1.1\n        with:\n          sast_release_id: ${{secrets.FOD_RELEASE_ID}}\n          sast_api_key: ${{ secrets.FOD_API_KEY}}\n          sast_api_secret: ${{ secrets.FOD_API_SECRET}}\n\n      - name: FOD Security Gating\n        run: |\n          auth=$(curl -X POST --header 'Content-Type: application/x-www-form-urlencoded' --header 'Connection: close' -d 'grant_type=client_credentials&amp;scope=api-tenant&amp;client_id=${{secrets.FOD_API_KEY}}&amp;client_secret=${{secrets.FOD_API_SECRET}}' 'https://api.emea.fortify.com/oauth/token')\n          tok3n=$( echo \"$auth\" | jq '.[\"access_token\"]' )\n          tok3n=\"${tok3n:1:-1}\"\n          releasedetails=$(curl -X GET --header 'Accept: application/json' --header 'Authorization: Bearer '${tok3n} 'https://api.emea.fortify.com/api/v3/releases/'${{secrets.FOD_RELEASE_ID}})\n          scanid=$( echo \"$releasedetails\" | jq .currentStaticScanId )\n          applicationname=$( echo \"$releasedetails\" | jq .applicationName | sed 's/[\"]//g')\n          scanSummary=$(curl -X GET --header 'Accept: application/json' --header 'Authorization: Bearer '${tok3n} 'https://api.emea.fortify.com/api/v3/scans/'${scanid}'/summary')\n          CRITICAL=$( echo \"$releasedetails\" | jq .staticCritical )\n          HIGH=$( echo \"$releasedetails\" | jq .staticHigh )\n          if [ $CRITICAL -gt 0 ]\n          then\n            echo \"##[error]Application has critical Issues\"          \n            curl -H 'Content-Type: application/json' -d '{\"text\": \"Application has critical Issues in FOD\"}' ${{secrets.TEAMS_WEBHOOK}}          \n            #exit 1\n          elif [ $HIGH -gt 0 ]\n          then\n            echo \"##[error]Application has High Issues\"\n            curl -H 'Content-Type: application/json' -d '{\"text\": \"Application has high Issues in FOD\"}' ${{secrets.TEAMS_WEBHOOK}}\n            #exit 1\n          else\n            echo \"PASSED\"\n          fi\n        continue-on-error: true\n</code></pre> <p>Note: To enforce security gating in block mode please uncomment exit code 1.</p>"},{"location":"AppSec%20Testing/SAST/SAST%20Tool%20and%20CI%20Integration/#jenkins","title":"Jenkins","text":"<p>Step 1:  Store GitHub username and personal access token in Jenkins credentials.\u200b\u200b\u200b\u200b\u200b\u200b\u200b</p> <p>Step 2:  Store API key, API secret in key vault credentials.</p> <p>Step 3: create a Jenkins pipeline and use the following code.</p> <pre><code>pipeline {\n    agent any\n\n    stages {\n\n        stage('Git Checkout'){\n            steps {\n                checkout([$class: 'GitSCM', branches: [[name: '&lt;Github_branchname&gt;']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '&lt;Github_credentials&gt;', url: '&lt;Github_URL&gt;']]])\n                }\n            }\n\n        stage('ZIP directory to be uploaded or unzip something') {\n            agent {\n                docker {\n                    image 'javieraviles/zip'\n                    reuseNode true\n                }\n            }\n            steps {\n                echo \"Creating zip file...\"\n\n                sh \"zip -r 'WebGoat-develop.zip' '&lt;Jenkins path where all the github files were downloaded&gt;'\"\n            }\n            }\n        stage('Downloading the FOD jar file from Github'){\n            steps{\n                sh 'wget -c https://github.com/fod-dev/fod-uploader-java/releases/download/v5.4.0/FodUpload.jar'\n                }\n                }\n        stage('Retrieve keyvault credentials and Upload the ZIP file to FOD using jar'){\n\n            options{\n\n                azureKeyVault(\n\n                    credentialID: '&lt;Servicepriciple_credentials&gt;',\n\u200b\n                    keyVaultURL: '&lt;Keyvault_url&gt;',\n\n                    secrets: [\n\n                        [envVariable: 'API_KEY_FOD', name: 'FOD-API-KEY-Test', secretType: 'Secret'],\n                        [envVariable: 'API_SECRET_FOD', name: 'FOD-API-SECRET-Test', secretType: 'Secret']\n\n                        ]\n                        )\n                        }\n                            steps{\n                                sh 'java -version'\n\n                                sh 'java -jar FodUpload.jar -ac $API_KEY_FOD $API_SECRET_FOD -rid 6560 -purl https://emea.fortify.com/ -apiurl                                       https://api.emea.fortify.com/ -z WebGoat-develop.zip -ep 2 -rp 0 -pp 1 -apf -I 1'\n\n                                }\n                                }\n\n\n\n\n                }\n            }\n</code></pre> <p>To understand what parameters, we need to use to run API from CI/CD tools. Please refer this link</p> <p>Note:</p> <p>1) If we are Scanning any code with \"FOD Plugin\", once the scan found any security vulnerabilities in code then it will automatically fail the CI/CD pipeline.</p> <p>2) As we are using FodUpload jar file to Scan the code instead of FOD plugin. There is no such process to fail the pipeline automatically once the scan found any security vulnerabilities in code.</p> <p>3) we need to use the custom code to fail the pipelines while using FodUpload jar to scan the code. Include lines from \"55 to 63\" to fail the CI/CD pipeline.</p> <p>4) $? is a special variable in shell that reads the exit status of the last command executed.</p> <p>Sample output:</p> <p>1) After the scanning is completed, if the code has security vulnerabilities. The job status will fail because of security vulnerabilities Please refer the below screenshot</p> <p>IMAGE</p>"},{"location":"AppSec%20Testing/SAST/SAST%20Tool%20and%20CI%20Integration/#concourse-ci","title":"Concourse CI:","text":"<p>Step 1: Store GitHub Username, Personal Access Token  and API_KEY and API_SECRET in Hashicorp Vault.</p> <p>Step 2: Create a Pipeline.yml with following code</p> <pre><code>resources:\n  - name: source-code\n    type: git\n    source:\n      uri: &lt;Github_Url&gt;\n      branch: &lt;branch_name&gt;\n      username: ((Github.username))\n      password: ((Github.personal_access_token))\n\njobs:\n  - name: source-code\n    public: false\n    plan:\n      - get: source-code\n        trigger: true\n      - task: test-using-FOD-SAST\n        config:\n          platform: linux\n          image_resource:\n            type: registry-image\n            source: { repository: ubuntu, tag: \"latest\" }\n          params:\n            FOD_API_KEY: ((API_CRED.FOD_API_KEY))\n            FOD_API_SECRET: ((API_CRED.FOD_API_SECRET))\n          inputs:\n            - name: source-code\n          run:\n            path: /bin/sh\n            args:\n              - -c\n              - |\n                apt-get update\n                echo \"--------install java------\"               \n                apt-get update &amp;&amp; DEBIAN_FRONTEND=\"noninteractive\" TZ=\"Asia/india\" apt-get install -y tzdata\n                apt-get -y install openjdk-11-jre               \n                echo \"-------install zip----\"\n                apt-get -y install zip\n                echo \"-----install wget------\"\n                apt-get -y install wget\n                echo \"java --version\"\n                cd source-code\n                zip -r uploadsourc.zip . -i /*.*\n                wget -c https://github.com/fod-dev/fod-uploader-java/releases/download/v5.4.0/FodUpload.jar\n                java -jar FodUpload.jar -ac ((API_CRED.FOD_API_KEY)) ((API_CRED.FOD_API_SECRET)) -rid 6560 -purl https://emea.fortify.com/ -                      apiurl https://api.emea.fortify.com/ -z uploadsourc.zip -ep 2 -rp 0 -pp 1 -apf -I 1\n</code></pre> <p>Note:</p> <p>Use the variable name 'API_CRED.FOD_API_KEY' to pass fortify on demand  API token in the pipeline. All the variable fields are configured in Hashicorp vault for reusability and manage the secrets ((Hashicorp vault variable)). GitHub and Fortify on demand details to be updated in the Hashicorp Vault. (Don't hard code username and password values in the pipeline) For steps to create a secret keys in HC Vault, refer here.</p> <p>Sample Output:-</p> <p>1) After the scanning is completed, if the code has security vulnerabilities. The job status will fail because of security vulnerabilities Please refer the below screenshot</p> <p>IMAGE</p>"},{"location":"AppSec%20Testing/SAST/SAST%20Tool%20and%20CI%20Integration/#product-features","title":"Product Features","text":"<ul> <li>Fortify on Demand gives you the tools to create, supplement, and expand a Software Security Assurance program with no infrastructure investments or security staff required.</li> <li>Fortify on Demand is the only application security provider to offer static application security testing (SAST), dynamic application security testing (DAST), and mobile application testing (MAST) on demand so you can choose the solution that\u2019s right for your business.</li> <li>Fortify on Demand assessments include a review by  security experts. In combination with innovative Fortify Scan Analytics machine learning platform, it removes false positives and ensures overall quality so your development teams can maximize their remediation efforts early in the software lifecycle.</li> <li>Fortify on Demand gives developers the tools to write secure code and optimize application security at every step of the software development cycle.</li> <li>Fortify on Demand is a comprehensive platform designed with helpdesk ticketing available 24x7 through a dedicated support team.x-www-</li> </ul>"},{"location":"AppSec%20Testing/SAST/SAST%20Tool%20and%20CI%20Integration/#architecture","title":"Architecture","text":"<p>IMAGE</p>"},{"location":"AppSec%20Testing/SAST/Snyk%20Code%20SAST%20-%20IDE%20Plugin/","title":"Snyk Code SAST   IDE Plugin","text":"<p>IDE integrations use Snyk Code\u2019s fast analysis and response, allowing you to spot an issue, understand and learn more about it, and fix it, as you write the code before you check the code in. So you can find possible security flaws in your code as you write it, on a line-by-line basis.</p> <p>Install the Snyk IDE plugin right from the marketplace</p> <ul> <li>Eclipse Plugin</li> <li>Jetbrains Plugin</li> <li>Visual Studio Extension</li> <li>Visual Studio Code extension</li> </ul> <p>By fixing issues early, Snyk Security helps you ace security reviews later down the line and avoid time-intensive or costly fixes downstream in a build process.</p>"},{"location":"AppSec%20Testing/SAST/Snyk%20Code%20SAST%20Tool%20and%20CI%20Integration/","title":"Snyk Code SAST Tool and CI Integration","text":"<p>Snyk Code is developer-first - embedding SAST as part of the development process, enabling developers to build software securely during the coding stage, and not trying to find and fix problems after the code is compiled. Snyk Code works in the IDEs and SCMs where the developers are used to building and reviewing code, and provides fast, actionable, and meaningful results to fix issues in real-time.</p>"},{"location":"AppSec%20Testing/SAST/Snyk%20Code%20SAST%20Tool%20and%20CI%20Integration/#scm-integrations","title":"SCM integrations","text":""},{"location":"AppSec%20Testing/SAST/Snyk%20Code%20SAST%20Tool%20and%20CI%20Integration/#repository-monitoring","title":"Repository monitoring","text":"<p>This integration allows you to:</p> <ul> <li>Manage Code Projects using your existing native import flow and tools.</li> <li>View and prioritize security issues found in the source code.</li> <li>Run a retest of a Project, and see the historical snapshots of a Project.</li> </ul>"},{"location":"AppSec%20Testing/SAST/Snyk%20Code%20SAST%20Tool%20and%20CI%20Integration/#github-integration","title":"GitHub integration","text":"<p>The Snyk GitHub integration lets you: * Continuously perform security scanning across all the integrated repositories * Detect vulnerabilities in your open-source components * Provide automated fixes and upgrades</p>"},{"location":"AppSec%20Testing/SAST/Snyk%20Code%20SAST%20Tool%20and%20CI%20Integration/#supported-languages","title":"Supported languages","text":"<p>Snyk Code currently supports the following programming languages: C# C/C++ (Beta) Go Java JavaScript PHP (currently does not support interfile) Python Ruby TypeScript Apex Scala (Beta) Swift (Beta) Kotlin (Beta) VB.NET (Beta),</p>"},{"location":"AppSec%20Testing/SAST/Snyk%20Code%20SAST%20Tool%20and%20CI%20Integration/#language-type-and-framework-support","title":"Language type and framework support","text":"<p>Snyk Code can work with a variety of relevant language types: * Dynamically typed languages such as JavaScript and Python. * Optionally strong typed languages such as TypeScript. * Strong typed languages such as Java.</p>"},{"location":"AppSec%20Testing/SAST/Snyk%20Code%20SAST%20Tool%20and%20CI%20Integration/#ci-integrations","title":"CI integrations","text":""},{"location":"AppSec%20Testing/Secret%20Scanning/","title":"Secret scanning","text":""},{"location":"AppSec%20Testing/Secret%20Scanning/#secret-scanning","title":"Secret scanning","text":"<p>Hardcoded secrets have always been a problem in organizations and are one of the first things we look for during a penetration test.</p> <p>When developers write secrets such as passwords and API keys directly into source code, these secrets can make their way to public repos or application packages, then into an attacker\u2019s hands. Developers can sometimes make mistakes when handling sensitive data.</p> <p>A good strategy to minimize the risk of hardcoded secrets is to employ a scan that combines pattern searching with entropy analysis before code makes it to production and to store secrets in configuration files or secret management services instead.</p>"},{"location":"AppSec%20Testing/Secret%20Scanning/Secret%20Scanning%20Tool%20Integration/","title":"Secret Scanning Tool and CI Integration","text":""},{"location":"AppSec%20Testing/Secret%20Scanning/Secret%20Scanning%20Tool%20Integration/#secret-scanning-tool-and-ci-integration","title":"Secret Scanning Tool and CI Integration","text":"<p>At M&amp;S Trufflehog is being used to scan the repositories to find leaked secrets</p> <p>We can use TruffleHog in CI to prevent secrets from being merged in Git. This document explains how to integrate Trufflehog in DevOps pipeline in CI.</p> <p>At M&amp;S we use Trufflehog for scanning the repos for finding hardcoded secrets. </p>"},{"location":"AppSec%20Testing/Secret%20Scanning/Secret%20Scanning%20Tool%20Integration/#preventing-leaks","title":"Preventing leaks","text":"<p>There are several tools which can be used for scanning code Repositories for leaks.</p> <p>In this document, we are going to explain the implementation of below tools.</p> <ul> <li>TruffleHog secret scanning \u2013 Enterprise Version.</li> <li>TruffleHog secret scanning.</li> <li>GitHub Advance security secret scanning.</li> </ul>"},{"location":"AppSec%20Testing/Secret%20Scanning/Secret%20Scanning%20Tool%20Integration/#trufflehog-secret-scanning-enterprise-version","title":"Trufflehog Secret Scanning \u2013 Enterprise Version","text":"<p>TruffleHog Enterprise includes managed Scanners that we host (the Hosted scanner), but you can also add your own self hosted Scanners. A scanner scans only the added sources that we are adding to the TruffleHog portal.</p> <p>TruffleHog support many sources like GitHub, Confluence, Jira, Slack etc</p> <p>Navigate to SOURCES and click on the plus button to add the source.</p>"},{"location":"AppSec%20Testing/Secret%20Scanning/Secret%20Scanning%20Tool%20Integration/#trufflehog-secret-scanning","title":"TruffleHog Secret Scanning","text":"<p>Searches through git repositories for secrets, digging deep into commit history and branches. This is effective at finding secrets accidentally committed.</p>"},{"location":"AppSec%20Testing/Secret%20Scanning/Secret%20Scanning%20Tool%20Integration/#how-it-works","title":"How it works","text":"<p>This module will go through the entire commit history of each branch, and check each diff from each commit, and check for secrets. This is both by regex and by entropy. For entropy checks, TruffleHog will evaluate the Shannon entropy for both the base64 char set and hexadecimal char set for every blob of text greater than 20 characters comprised of those character sets in each diff. If at any point a high entropy string &gt;20 characters is detected, it will print to the screen.</p>"},{"location":"AppSec%20Testing/Secret%20Scanning/Secret%20Scanning%20Tool%20Integration/#regular-expressionregex","title":"Regular Expression(regex)","text":"<p>Regular expressions are patterns used to match character combinations in strings. A regular expression pattern is composed of simple characters, such as /abc/, or a combination of simple and special characters, such as /abc/ or /Chapter (\\d+).\\d/.</p> <p>Hardcoded credentials such as API keys, encryption keys, and database passwords can often be discovered by grepping for keywords such as \u201ckey\u201d, \u201csecret\u201d, \u201cpassword\u201d, \u201cghp\u201dor \u201caws\u201d.</p> <p>Straightforward way to detect hardcoded credentials is to use text search and regex. we can use string searches to look for keywords, known file names, and file formats that indicate a secret. RSA private key files, for instance, start with the string -----BEGIN RSA PRIVATE KEY-----.</p> <p>We can detect these by looking for patterns in source code using regex searches. For instance.</p> <p>AWS access keys IDs commonly start with the string \u201cAKIA\u201d, followed by 16 alphanumeric characters. So, if we do a regex search of AKIA[0\u20139A-Z]{16}, can very reliably identify strings of this format. Twilio API keys start with \u201cSK\u201d followed by 32 alphanumeric characters. So, we can locate them with the regex pattern SK[a-z0\u20139]{32}. Passwords in URLs can be detected by searching for patterns that indicate basic authentication syntax: [a-zA-Z]{3,15}:\\/\\/[^\\/\\:@]+:[^\\/\\:@]+@.{1,100}. This regex pattern will discover credentials included in URLs: protocol://username:password@example.com.  Identify the key formats for the services we use and target the search using those patterns.</p>"},{"location":"AppSec%20Testing/Secret%20Scanning/Secret%20Scanning%20Tool%20Integration/#custom-regex","title":"Custom Regex","text":"<p>Custom regexes can be added with the following flag --rules . This should be a json file of the following format:</p> <p>{</p> <p>\"Slack Token\": \"(xox[p|b|o|a]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})\",</p> <p>\"Generic Private Key POST Encapsulation Boundary\": \" PRIVATE KEY-----\",</p> <p>\"Generic Private Key Block POST Encapsulation Boundary\": \" PRIVATE KEY BLOCK-----\",</p> <p>\"Private key\": \"-----BEGIN PRIVATE KEY-----\",</p> <p>\"RSA private key\": \"-----BEGIN RSA PRIVATE KEY-----\",</p> <p>\"SSH (DSA) private key\": \"-----BEGIN DSA PRIVATE KEY-----\",</p> <p>\"SSH (EC) private key\": \"-----BEGIN EC PRIVATE KEY-----\",</p> <p>\"PGP private key block\": \"-----BEGIN PGP PRIVATE KEY BLOCK-----\",</p> <p>\"Amazon AWS Access Key ID\": \"AKIA[0-9A-Z]{16}\",</p> <p>\"Amazon MWS Auth Token\": \"amzn\\.mws\\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\",</p> <p>\"AWS API Key\": \"AKIA[0-9A-Z]{16}\",</p> <p>\"Bitly Key\": \"R_[0-9a-f]{32}\",</p> <p>\"Facebook Access Token\": \"EAACEdEose0cBA[0-9A-Za-z]+\",</p> <p>\"Facebook OAuth\": \"[f|F][a|A][c|C][e|E][b|B][o|O][o|O][k|K].*['|\\\"][0-9a-f]{32}['|\\\"]\",</p> <p>\"GitHub\": \"[g|G][i|I][t|T][h|H][u|U][b|B].*['|\\\"][0-9a-zA-Z]{35,40}['|\\\"]\",</p> <p>\"Generic API Key\": \"[a|A][p|P][i|I][_]?[k|K][e|E][y|Y].*['|\\\"][0-9a-zA-Z]{32,45}['|\\\"]\",</p> <p>\"Generic Secret\": \"[s|S][e|E][c|C][r|R][e|E][t|T].*['|\\\"][0-9a-zA-Z]{32,45}['|\\\"]\",</p> <p>\"Google API Key\": \"AIza[0-9A-Za-z\\-_]{35}\",</p> <p>\"Google Cloud Platform API Key\": \"AIza[0-9A-Za-z\\-_]{35}\",</p> <p>\"Google Cloud Platform OAuth\": \"[0-9]+-[0-9A-Za-z_]{32}\\.apps\\.googleusercontent\\.com\",</p> <p>\"Google Drive API Key\": \"AIza[0-9A-Za-z\\-_]{35}\",</p> <p>\"Google Drive OAuth\": \"[0-9]+-[0-9A-Za-z_]{32}\\.apps\\.googleusercontent\\.com\",</p> <p>\"Google (GCP) Service-account\": \"\\\"type\\\": \\\"service_account\\\"\",</p> <p>\"Google Gmail API Key\": \"AIza[0-9A-Za-z\\-_]{35}\",</p> <p>\"Google Gmail OAuth\": \"[0-9]+-[0-9A-Za-z_]{32}\\.apps\\.googleusercontent\\.com\",</p> <p>\"Google OAuth Access Token\": \"ya29\\.[0-9A-Za-z\\-_]+\",</p> <p>\"Google YouTube API Key\": \"AIza[0-9A-Za-z\\-_]{35}\",</p> <p>\"Google YouTube OAuth\": \"[0-9]+-[0-9A-Za-z_]{32}\\.apps\\.googleusercontent\\.com\",</p> <p>\"Heroku API Key\": \"[h|H][e|E][r|R][o|O][k|K][u|U].*[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\",</p> <p>\"LinkedIn API Key\": \"[l|L][i|I][n|N][k|K][e|E][d|D][i|I][n|N].*['|\\\"][0-9a-zA-Z]{16}['|\\\"]\",</p> <p>\"MailChimp API Key\": \"[0-9a-f]{32}-us[0-9]{1,2}\",</p> <p>\"Mailgun API Key\": \"key-[0-9a-zA-Z]{32}\",</p> <p>\"Password in URL\": \"[a-zA-Z]{3,10}://[^/\\s:@]{3,20}:[^/\\s:@]{3,20}@.{1,100}[\\\"'\\s]\",</p> <p>\"PayPal Braintree Access Token\": \"access_token\\$production\\$[0-9a-z]{16}\\$[0-9a-f]{32}\",</p> <p>\"Picatic API Key\": \"sk_live_[0-9a-z]{32}\",</p> <p>\"Slack Webhook\": \"https://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}\",</p> <p>\"Stripe API Key\": \"sk_live_[0-9a-zA-Z]{24}\",</p> <p>\"Stripe Restricted API Key\": \"rk_live_[0-9a-zA-Z]{24}\",</p> <p>\"Square Access Token\": \"sq0atp-[0-9A-Za-z\\-_]{22}\",</p> <p>\"Square OAuth Secret\": \"sq0csp-[0-9A-Za-z\\-_]{43}\",</p> <p>\"Twilio API Key\": \"SK[0-9a-fA-F]{32}\",</p> <p>\"Twitter Access Token\": \"[t|T][w|W][i|I][t|T][t|T][e|E][r|R].*[1-9][0-9]+-[0-9a-zA-Z]{40}\",</p> <p>\"Twitter OAuth\": \"[t|T][w|W][i|I][t|T][t|T][e|E][r|R].*['|\\\"][0-9a-zA-Z]{35,44}['|\\\"]\",</p> <p>\"Github OAuth\": \" [A-Za-z0-9_]{255}\",</p> <p>\"password\": \"[a-zA-Z0-9_@]{8,24}\",</p> <p>\"Secret\": \"/[0-9a-zA-Z]{6,24}/\"</p> <p>}</p> <p>Note:</p> <p>if custom options argument string is used, it will overwrite default settings if you want to just run the trufflehog command with NO arguments, set as a single-spaced string \" \".</p>"},{"location":"AppSec%20Testing/Secret%20Scanning/Secret%20Scanning%20Tool%20Integration/#entropy","title":"Entropy","text":"<p>Relying on text searches, we risk missing secrets that don\u2019t adhere to a specific format. This is where entropy scanning comes in.</p> <p>Password entropy is a measurement of how unpredictable a password is. It is based on the character set used (which is expansible by using lowercase, uppercase, numbers as well as symbols) as well as password length.</p> <p>Think of entropy as how random and unpredictable something is. For instance, a string composed of only one-character aaaaa has very low entropy. A longer string with a larger set of characters wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY, has higher entropy.</p> <p>Entropy is a good tool to find highly randomized and complex strings, which often indicates a secret. By measuring the entropy of string literals in your source code, you can discover suspicious strings of any format.</p>"},{"location":"AppSec%20Testing/Secret%20Scanning/Secret%20Scanning%20Tool%20Integration/#trufflehog-syntax","title":"TruffleHog Syntax","text":"<p>Below is the help command used to see the trufflehog syntax</p> <p>IMAGE</p> <p>With the --include_paths and --exclude_paths options, it is also possible to limit scanning to a subset of objects in the Git history by defining regular expressions (one per line) in a file to match the targeted object paths.</p> <p>include-patterns.txt exclude-patterns.txt These filter files could then be applied.</p> <p>trufflehog --include_paths include-patterns.txt --exclude_paths exclude-patterns.txt file://path/to/my/repo.git</p>"},{"location":"AppSec%20Testing/Secret%20Scanning/Secret%20Scanning%20Tool%20Integration/#how-to-integrate","title":"How to integrate?","text":"<p>General approach : Platform independent CI integration-</p> <p>Option 1: Trufflehog Binary(Enterprise Scan)(Recommended)</p> <p>You can run Trufflehog Enterprise Scan with Trufflehog Binary using the below command-</p> <pre><code>\"curl -q \"https://storage.googleapis.com/thog-releases/trufflehog-scanner/latest/fetch.sh\" | bash\n            ./trufflehog --fail-verified git\"\n</code></pre> <p>curl command will fetch the Trufflehog scanner latest version for installation </p> <p>./trufflehog \u2013 does the actual scanning</p> <p>--fail-verified- Only emit failure code for verified findings.</p> <p>TruffleHog will return a non-zero exit code if there are findings.</p>"},{"location":"AppSec%20Testing/Secret%20Scanning/Secret%20Scanning%20Tool%20Integration/#azure-devops-pipeline-integration","title":"Azure DevOps pipeline Integration","text":"<pre><code>trigger:\n- 'develop'\n\n\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n  - task: Bash@3\n    inputs:\n      targetType: 'inline'\n      script: |\n        curl -q \"https://storage.googleapis.com/thog-releases/trufflehog-scanner/latest/fetch.sh\" | bash\n                ./trufflehog --fail-verified git\n                 status=$?\n                  echo $status\n                 if [ $status -eq 1 ]\n                then\n                 curl -H 'Content-Type: application/json' -d ' {\"text\":  \"Trufflehog Scan for the (ApplicationName) has secrets\"  }' $(WEBHOOK)\n                else\n                 echo \"Your application has no secrets\"\n                fi\n\nNote : In the place of (ApplicationName) in the curl command Mention the Application name which is to be integrated\n</code></pre>"},{"location":"AppSec%20Testing/Secret%20Scanning/Secret%20Scanning%20Tool%20Integration/#github-actions-pipeline-integration-","title":"Github Actions pipeline Integration-","text":"<pre><code>steps:\n    - uses: actions/checkout@v1\n    - name: trufflehog scanning\n      continue-on-error: false\n      run: |\n        curl -q \"https://storage.googleapis.com/thog-releases/trufflehog-scanner/latest/fetch.sh\" | bash\n        ./trufflehog --fail-verified git\n         if: always()\n    - name: Notify dedicated teams channel for secrets\n      if: failure() \n      run: |\n         curl -H 'Content-Type: application/json' -d ' {\"text\": \"Your application has secrets\" }'  ${{ secrets.webhook}}\n         echo \"Secrets found\"\n      continue-on-error: true \n    - name: Notify dedicated teams channel for secrets not found\n      if: success()\n      run: |\n            echo \"No Secrets\"\n            exit 0\n       continue-on-error: true\n\nNote : In the place of (ApplicationName) in the curl command Mention the Application name which is to be integrated\n\nNote - Another approach is to use the TruffleHog Enterprise Action which is recommended.\n</code></pre> <p>name: TruffleHog Enterprise scan</p> <pre><code>on: [push, pull_request]\n\njobs:\n  scanning:\n    name: TruffleHog Enterprise scan\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0 # fetch all history so multiple commits can be scanned\n      - name: TruffleHog Enterprise scan\n        uses: trufflesecurity/TruffleHog-Enterprise-Github-Action@main\n        with:\n            args: --fail-verified ${{ github.event.repository.default_branch }} HEAD\n\nNote : In the place of (ApplicationName) in the curl command Mention the Application name which is to be integrated\n</code></pre>"},{"location":"AppSec%20Testing/Secret%20Scanning/Secret%20Scanning%20Tool%20Integration/#references","title":"References","text":"<p>https://docs.trufflesecurity.com/docs/scanning-git/scanning-in-ci/</p> <p>https://github.com/trufflesecurity/trufflehog</p> <p>Contact the team for any clarification- dl-appsecteam@marks-and-spencer.com</p>"},{"location":"AppSec%20Testing/Software%20Composition%20Analysis/","title":"Software Composition Analysis","text":""},{"location":"AppSec%20Testing/Software%20Composition%20Analysis/#software-composition-analysis","title":"Software Composition Analysis","text":"<p>Developers are adopting more and more open-source code, third-party code and libraries to achieve various tasks in application development process. This may introduce application security vulnerabilities if the latest and non vulnerable versions of the packages are not used. But determining whether the open-source code is vulnerable or not is a cumbersome job. Hence there is a need of Software Composition Analysis (SCA) tool like Snyk to uncover hidden vulnerabilities in the libraries used and their vulnerable direct / transitive dependencies.</p>"},{"location":"AppSec%20Testing/Software%20Composition%20Analysis/#challenges-in-security-open-source","title":"Challenges in Security Open source","text":"<ul> <li>Which libraries are we using, and do they contain any vulnerabilities?</li> <li>Does the vulnerable library do anything bad?</li> <li>Can I react fast enough to new vulnerabilities?</li> <li>What type of licenses are used, and can we use them?</li> </ul> <p>Simply using open-source libraries is not a security threat to the business. The real problem is not knowing that what you are using contains vulnerabilities, and that they are exploitable in your application.</p>"},{"location":"AppSec%20Testing/Software%20Composition%20Analysis/#how-sca-tools-can-help","title":"How SCA Tools can help?","text":"<ul> <li>Inventory - SCA tool creates inventory of all open-source components used</li> <li>Security Vulnerabilities - SCA tools identifies the known vulnerabilities in the open-source components used</li> <li>License Compliance - SCA tools helps in identifying the open-source license violations as per organizations policy</li> </ul>"},{"location":"AppSec%20Testing/Software%20Composition%20Analysis/SCA%20Tool%20and%20CI%20Integration/","title":"SCA Tool and CI Integration","text":""},{"location":"AppSec%20Testing/Software%20Composition%20Analysis/SCA%20Tool%20and%20CI%20Integration/#sca-tool-and-ci-integration","title":"SCA Tool and CI Integration","text":"<p>Snyk is a developer-first security solution that helps organizations to use open source and stay secure. Snyk is the only solution that seamlessly and proactively finds and fixes vulnerabilities and license violations in open source dependencies.</p> <ul> <li>Snyk\u00a0statically analyzes software components of the projects to find vulnerable dependencies used and helps to fix them</li> <li>Snyk tests can be integrated with Github and CI/CD tools to trigger scans during pull or build process initiated from developers.</li> </ul>"},{"location":"AppSec%20Testing/Software%20Composition%20Analysis/SCA%20Tool%20and%20CI%20Integration/#how-to-onboard-an-application-and-get-access-for-snyk","title":"How to Onboard an application and get access for Snyk:","text":"<p>For Day 1 and Day 3 applications, please use Ecosystem builder for Cloud Native or V2 applications to get onboarded in the Snyk. You can also reach out to our DL: DL-AppSecTeam@marks-and-spencer.com if you face any issues during onboarding. or Raise an AIG (https://myaccess.microsoft.com/#/access-packages) request (search for [Snyk_FOD_ReadOnly])to get added into Snyk production Azure AD [IT APP AZ Cyber FOD Prod Application Dev]</p> <p>For Day 7 and Month 1 applications, please send a mail to DL-AppSecTeam@marks-and-spencer.com with below details to request access. \u200b\u200b\u200b\u200b\u200b\u200b\u200bPortfolio name Product name Y account name</p>"},{"location":"AppSec%20Testing/Software%20Composition%20Analysis/SCA%20Tool%20and%20CI%20Integration/#how-to-generate-api-token-to-access-the-snyk-cli","title":"How to generate API token to access the Snyk CLI \u200b\u200b\u200b\u200b\u200b\u200b?","text":"<p>Once access is granted to Y account follow the below steps to generate API token. Logon to Snyk UI, using (SSO Login). Go to Organization Settings &gt; Service Accounts &gt; Create a new service account(provide a name) &gt; Provide Role as Org Admin.</p>"},{"location":"AppSec%20Testing/Software%20Composition%20Analysis/SCA%20Tool%20and%20CI%20Integration/#steps-to-be-followed-for-performing-snyk-cli-scan","title":"Steps to be followed for performing Snyk  CLI scan:","text":"<p>Step 1: Download the Snyk CLI executable (Latest Version) Step 2: Authorize Snyk CLI with Service Account Token.\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b                    snyk auth </p> <p>Step 3: Run snyk test to check for vulnerabilities and fail the build if any are found\u200b\u200b\u200b\u200b\u200b\u200b\u200b                    snyk test --all-projects </p> <pre><code>         Note: For gradle projects use --all-projects for monorepos or use --all-sub-projects for \"multi-project\" configurations and test all sub-projects\n</code></pre> <p>Step 4: Capture the dependency tree for ongoing monitoring in Snyk\u200b\u200b\u200b\u200b\u200b\u200b\u200b                    snyk monitor --all-projects</p>"},{"location":"AppSec%20Testing/Software%20Composition%20Analysis/SCA%20Tool%20and%20CI%20Integration/#integration-steps","title":"Integration steps:","text":""},{"location":"AppSec%20Testing/Software%20Composition%20Analysis/SCA%20Tool%20and%20CI%20Integration/#azure-devops","title":"Azure Devops","text":"<p>Step 1: Store Service Account token in Azure KeyVault.</p> <p>Step 2: Create Azure Resource Manager Service Connection in your Azure Devops Project.</p> <p>Step 3: Use below task to get Personal API token from Azure KeyVault.</p> <pre><code>task: AzureKeyVault@1\n    inputs:\n      azureSubscription: '&lt;Service_Connection_Name&gt;'\n      KeyVaultName: '&lt;KeyVault_Name&gt;'\n      SecretsFilter: '&lt;keyName&gt;'\n      RunAsPreJob: true\n</code></pre> <p>Step 4: Use below task to run a snyk test and capture the dependency tree for ongoing monitoring in Snyk.</p> <p>Note: Get the Snyk CLI download URL from here based on your OS type.</p> <pre><code>task: Bash@3\n   displayName: \"Snyk_SCA_Scanning\"\n   inputs:\n     targetType: 'inline'\n     script: |\n       echo \"----------Download Latest Snyk CLI-----------\"\n       curl -Lo ./snyk \"https://github.com/snyk/snyk/releases/download/v1.1159.0/snyk-linux\"\n       chmod +x snyk\n       ls -lrt\n       echo \"----------Authenticating Snyk-----------\"\n       ./snyk auth $(snyk-token)\n       echo \"----------Snyk Monitor-----------\"\n       ./snyk monitor --all-projects\n       echo \"----------Snyk Scanning-----------\"\n       ./snyk test --all-projects\n     failOnStderr: true\ntask: Bash@3\n   displayName: \"Snyk Security Gating\"\n   inputs:\n     targetType: 'inline'\n     script: |    \n       snykCount=$(curl -X GET --header 'Content-Type: application/json' --header 'Authorization: token $(snyk-token)' 'https://api.snyk.io/api/v1/org/&lt;org id&gt;/project/&lt;project id&gt;')\n       CRITICAL=$(echo \"$snykCount\" | jq .issueCountsBySeverity.critical )\n       HIGH=$(echo \"$snykCount\" | jq .issueCountsBySeverity.high )\n       MEDIUM=$(echo \"$snykCount\" | jq .issueCountsBySeverity.medium )\n       LOW=$(echo \"$snykCount\" | jq .issueCountsBySeverity.low )\n       echo \"CRITICAL = $CRITICAL\"\n       echo \"HIGH = $HIGH\"\n       echo \"MEDIUM = $MEDIUM\"\n       echo \"LOW = $LOW\"\n       if [ $CRITICAL -gt 0 ]\n       then\n         curl -H 'Content-Type: application/json' -d '{\"text\": \"&lt;Application Name&gt; has Critical Issues in Snyk\"}' $(teams_webhook)          \n         echo \"##[error]Application has critical issues\"\n         #exit 1\n       elif [ $HIGH -gt 0 ]\n       then\n         curl -H 'Content-Type: application/json' -d '{\"text\": \"&lt;Application Name&gt; has High Issues in Snyk\"}' $(teams_webhook)          \n         echo \"##[error]Application has High issues\"\n         #exit 1\n       else\n         echo \"PASSED\"\n       fi\n</code></pre> <p>Sample screenshot of Snyk execution and results:</p> <p>IMAGE</p> <pre><code>Note: To enforce security gating in block mode please uncomment exit code 1.\n</code></pre>"},{"location":"AppSec%20Testing/Software%20Composition%20Analysis/SCA%20Tool%20and%20CI%20Integration/#github-actions","title":"GitHub Actions","text":"<p>Step 1: Create Service Account Token as GitHub Secrets in GitHub Settings &gt; Secrets &gt; Repository Secrets.</p> <p>Step 2: Use below pipeline to run a snyk test and capture the dependency tree for ongoing monitoring in Snyk.</p> <p>Note: Get the Snyk CLI download URL from here based on your runner machine OS type</p> <pre><code>name: Snyk_SCA_Scan\non: [push]\njobs:\n  Snyk_SCA_Scan:\n    needs: Code_checkout\n    runs-on: &lt;runner-machine&gt;   \n    steps:\n    - uses: actions/checkout@v1\n    - name: Snyk SCA Scanning\n      continue-on-error: true\n      run: |\n        echo \"----------Download Latest Snyk CLI-----------\"\n        curl -Lo ./snyk \"https://github.com/snyk/snyk/releases/download/v1.1159.0/snyk-linux\"\n        chmod +x snyk\n        ls -lrt\n        echo \"----------Authenticating Snyk-----------\"\n        ./snyk auth ${{secrets.Snyk_token}}\n        echo \"----------Snyk Monitor-----------\"\n        ./snyk monitor --all-projects\n        echo \"----------Snyk Scanning-----------\"\n        ./snyk test --all-projects\n        echo \"-----------Snyk Security Gating-----------\"\n        snykCount=$(curl -X GET --header 'Content-Type: application/json' --header 'Authorization: token ${{secrets.Snyk_token}}' 'https://api.snyk.io/api/v1/org/&lt;org id&gt;/project/&lt;project id&gt;')\n        CRITICAL=$(echo \"$snykCount\" | jq .issueCountsBySeverity.critical )\n        HIGH=$(echo \"$snykCount\" | jq .issueCountsBySeverity.high )\n        MEDIUM=$(echo \"$snykCount\" | jq .issueCountsBySeverity.medium )\n        LOW=$(echo \"$snykCount\" | jq .issueCountsBySeverity.low )\n        echo \"CRITICAL = $CRITICAL\"\n        echo \"HIGH = $HIGH\"\n        echo \"MEDIUM = $MEDIUM\"\n        echo \"LOW = $LOW\"\n        if [ $CRITICAL -gt 0 ]\n        then\n          curl -H 'Content-Type: application/json' -d '{\"text\": \"Application has Critical Issues in Snyk\"}' ${{secrets.TEAMS_WEBHOOK}}\n          echo \"##[error]Application has critical issues\"\n          #exit 1\n        elif [ $HIGH -gt 0 ]\n        then\n          curl -H 'Content-Type: application/json' -d '{\"text\": \"Application has High Issues in Snyk\"}' ${{secrets.TEAMS_WEBHOOK}}\n          echo \"##[error]Application has High issues\"\n          #exit 1\n        else\n          echo \"PASSED\"\n        fi\n\nNote: To enforce security gating in block mode please uncomment exit code 1.\n</code></pre> <p>Sample screenshot of Snyk execution and results:</p> <p>IMAGE</p>"},{"location":"AppSec%20Testing/Software%20Composition%20Analysis/SCA%20Tool%20and%20CI%20Integration/#jenkins","title":"Jenkins","text":"<p>Step 1: Store Service Account token in Azure KeyVault.</p> <p>Step 2: Create a service principal and store that as a jenkins secret to retrieve the secret from the azure keyvault</p> <p>Step 3: Create a Jenkins pipeline with the below stages.</p> <pre><code>pipeline {\n  agent any\n  stages {\n    stage('Git Checkout'){\n            steps {\n                checkout([$class: 'GitSCM', branches: [[name: '&lt;branch_name&gt;']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '&lt;Github_credential_name&gt;', url: '&lt;Github_url&gt;']]])\n                }\n    }\n   stage (\"Retrieving snyk secret from the Azure key Vault\") {\n     options{\n                azureKeyVault(\n\u200b\n                    credentialID: '&lt;AzureKuyVault_credential_name&gt;',\n\u200b\n                    keyVaultURL: '&lt;KeyVault_url&gt;',\n\u200b\n                    secrets: [\n\u200b\n                        [envVariable: 'snyktoken', name: '&lt;AKV_snyk_token_name&gt;', secretType: 'Secret']\n\u200b\n                        ]\n                        )\n     }\n      steps {\n\u200b\n          sh \"\"\"\n                  set -eu -o pipefail\n                  rm -rf snyk\n\n                  curl -Lo ./snyk \"https://github.com/snyk/snyk/releases/download/v1.1159.0/snyk-linux\"\n\n                  ls -lrt\n\n                  chmod +x snyk\n                  ls -lrt\n                  ./snyk -v\n                  ./snyk auth ${snyktoken}\n\n                  ./snyk monitor --all-projects\n\n                  ./snyk test --all-projects\n\n                  \"\"\"\n\n        }\n      }\n}\n\u200b\n}\n</code></pre> <p>\u200b Sample screenshot of Snyk execution and results:</p> <p>IMAGE</p>"},{"location":"AppSec%20Testing/Software%20Composition%20Analysis/SCA%20Tool%20and%20CI%20Integration/#concourse-ci","title":"Concourse CI","text":"<p>Step 1: GitHub and Snyk details should be updated in the Hashicorp Vault. (Don't hard code username and password values in the pipeline)</p> <p>Use below variables to pass secrets in the pipeline.</p> <p>github.username - Github Username github.personal_access_token - Github PAT Token \u200b\u200b\u200b\u200b\u200b\u200b\u200bsnyk_cli.token - Snyk's API token All the variable fields are configured in Hashicorp vault for reusability and manage the secrets ((Hashicorp vault variable)).</p> <p>For steps to create a secret keys in HC Vault, refer here.</p> <p>Step 2: Create a pipeline.yml with following code</p> <pre><code>resources:\n  - name: source-code\n    type: git\n    source:\n      uri: &lt;Github_Url&gt;\n      branch: &lt;branch_name&gt;\n      username: ((github.username))\n      password: ((github.personal_access_token))\n\u200b\njobs:\n  - name: source-code\n    public: false\n    plan:\n      - get: source-code\n        trigger: true\n      - task: Snyk_SCA_Scanning\n        config:\n          platform: linux\n          image_resource:\n            type: registry-image\n            source: { repository: ubuntu, tag: \"18.04\" }\n          inputs:\n            - name: source-code\n          run:\n            path: /bin/sh\n            args:\n              - -c\n              - |\n                echo \"----------Installing Dependency - Curl-----------\"\n                apt-get update\n                apt-get -y install curl\n                curl --version\n                echo \"----------Downloading Snyk-----------\"\n                curl -Lo ./snyk \"https://github.com/snyk/snyk/releases/download/v1.1159.0/snyk-linux\"\n                chmod +x snyk\n                ls -lrt\n                echo \"----------Authenticating Snyk-----------\"\n                ./snyk auth ((snyk_cli.token))\n                echo \"----------Snyk Monitor-----------\"\n                ./snyk monitor --all-projects\n                status=$?\n                echo \"----------Snyk Scanning-----------\"\n                ./snyk test --all-projects\n\u200b\n</code></pre>"},{"location":"AppSec%20Testing/Software%20Composition%20Analysis/SCA%20Tool%20and%20CI%20Integration/#product-features","title":"Product Features","text":"<ul> <li>Snyk tool creates inventory of all open-source components used.</li> <li> <p>Snyk tool identifies the known vulnerabilities in the open-source components used.</p> </li> <li> <p>Snyk tool helps in remediating the vulnerable components providing fix recommendations.</p> </li> <li> <p>Find and fix vulnerabilities in application code in real-time during the development process.\u200b\u200b\u200b\u200b\u200b\u200b\u200b</p> </li> <li>Application security at scale requires developers to be the first step in the security process. Snyk\u2019s platform is purpose-built to be easily used by developers to build software securely.</li> <li>The Snyk Intel vulnerability database is maintained by a dedicated research team that combines public sources, contributions from the developer community and academia, proprietary research and machine learning.</li> <li>Snyk will integrated with major repositories like GitHub and major CICD tools like Azure Devops, Jenkins, Concourse, etc...</li> </ul>"},{"location":"AppSec%20Testing/Software%20Composition%20Analysis/SCA%20Tool%20and%20CI%20Integration/#architecture","title":"Architecture","text":"<p>IMAGE</p>"},{"location":"Awareness/","title":"Awareness","text":""},{"location":"Awareness/#awareness","title":"Awareness","text":"<p>The objective of this section is to give the engineers a short introduction to the topic that will leave them wanting to learn more about it and point them to where they can dig deeper in cyber security.</p>"},{"location":"Awareness/ImmersiveLabs/","title":"ImmersiveLabs","text":""},{"location":"Awareness/ImmersiveLabs/#immersive-labs","title":"Immersive Labs","text":"<p>Immersive Labs is a lab based learning platform that helps engineers develop their skills in cyber security. With something to suit all the roles from administration to technical architecture, to information governance and cyber analysis \u2013 it offers customised training all under one platform.</p>"},{"location":"Awareness/ImmersiveLabs/#request-immersive-labs-access-in-aig","title":"Request Immersive Labs Access in AIG :","text":"<p>Clickhere</p>"},{"location":"Awareness/ImmersiveLabs/#login-to-immersive-labs-through-below-url","title":"Login to Immersive Labs through below URL:","text":"<p>Clickhere</p>"},{"location":"Awareness/SKF/","title":"Security Knoweldge Framework(SKF)","text":""},{"location":"Awareness/SKF/#security-knoweldge-frameworkskf","title":"Security Knoweldge Framework(SKF)","text":"<p>The OWASP Security Knowledge Framework is an open source web application that explains secure coding principles in multiple programming languages. The goal of OWASP-SKF is to help you learn and integrate security by design in your software development and build applications that are secure by design.</p>"},{"location":"Awareness/SKF/#how-to-access-skf","title":"How to access SKF?","text":"<p>Provide details here.</p>"},{"location":"Contact/","title":"Contact Application Security Team","text":""},{"location":"Contact/#contact-application-security-team","title":"Contact Application Security Team","text":"<p>Drop an email to dl-infosec-cloud-devops-security@marks-and-spencer.com</p>"},{"location":"SSDLC/","title":"Secure Software Development Lifecycle (SSDLC)","text":""},{"location":"SSDLC/#secure-software-development-lifecycle-ssdlc","title":"Secure Software Development Lifecycle (SSDLC)","text":"<p>Security applies at every phase of the software development life cycle (SDLC) and needs to be at the forefront of your developers\u2019 minds as they implement your software\u2019s requirements. </p> <p>A Secure SDLC requires adding security testing at each software development stage, from design, to development, to deployment and beyond.</p> <p>With dedicated effort, security issues can be addressed in the SDLC pipeline well before deployment to production. This reduces the risk of finding security vulnerabilities in your app and works to minimize the impact when they are found</p>"},{"location":"SSDLC/#why-ssdlc-is-important","title":"Why SSDLC is Important?","text":"<p>Having a robust and secure SDLC process is critical to ensure our application is not subject to attacks by any external or internal attackers.</p> <p></p>"},{"location":"SSDLC/#the-benefits-of-ssdlc","title":"The benefits of SSDLC","text":"<ul> <li>Shift left Security - Integrating security checks as early in the SDLC as possible </li> <li>Helps to plan releases, making it easier to catch and address issues that arise that could affect the release timeline</li> <li>By fixing these issues early in the process, development teams can reduce the total cost of ownership of their applications</li> </ul>"},{"location":"SSDLC/#how-to-ensure-ssdlc","title":"How to ensure SSDLC","text":"<ul> <li>Having security requirements against functional requirements</li> <li>Adhering to secure coding guidelines</li> <li>Developers to attend secuirity awareness and secure coding training</li> <li>Conducting Triage workshops</li> <li>Having remediation SLAs</li> </ul>"},{"location":"SSDLC/#devsecops","title":"DevSecOps","text":"<p>DevSecOps is the principle of bringing Security to the forefront of Development and Operations. DevOps combines the development and operation of applications into a continuous lifecycle, and DevSecOps is the integration of security throughout this cycle.</p> <ul> <li>Automation of Security controls into a continuous testing process</li> <li>Mature DevSecOps benefits from faster, more reliable Security Delivery with up to 40% less Security Vulnerabilities</li> <li>Shift Left - secure applications from all phases, emphasis on getting it right at the start</li> <li>DevSecOps Platform allows for a consistent framework of identifying and gaining visibility/measurements to/of risk across the portfolio</li> </ul>"},{"location":"Security%20Design/","title":"Security Design","text":""},{"location":"Security%20Design/#security-design","title":"Security Design","text":"<p>Although most security defects are born during implementation, the most expensive are those that are introduced in the design phase. A proactive approach of paying close attention to security during the design phase prevents expensive redesign and yields substantial benefits during all later phases of the SDLC.</p> <p>Design considerations include both architectural issues at the system level and at the individual component level. At the system level, we are interested in techniques that help us reduce our software\u2019s attack surface, and better understand how potential threats might impact our design choices. At the component level, we are interested in deciding how best to implement each module</p>"},{"location":"Security%20Design/TM/","title":"TM","text":""},{"location":"Security%20Design/TM/#threat-modeling-introduction-and-workflow","title":"Threat Modeling: Introduction and Workflow","text":"<p>Threat modeling works to identify, communicate, and understand threats and mitigations within the context of protecting something of value.</p> <p>A threat model is a structured representation of all the information that affects the security of an application.</p>"},{"location":"Security%20Design/TM/#threat-modeling","title":"Threat Modeling","text":""},{"location":"Security%20Design/TM/#why-should-we-do-threat-modeling","title":"Why should we do Threat Modeling?","text":"<ul> <li>Makes our software more secure</li> <li>Little time investment early means saved time later</li> <li>Saves M&amp;S money and reputation</li> <li>It's easy to get started</li> </ul>"},{"location":"Security%20Design/TM/#to-get-started","title":"To get started:","text":"<p>Raise a request on InfoSec Hub https://cyb-eun-prd-cygraph-app1.azurewebsites.net/demand/catalogue </p> <p>Raise the request under \"Request for AppSec Security Assistance\" on Infosec hub</p> <p>Please send us links to your projects, codebase and architecture diagrams</p> <p>We will arrange 2 sessions: intro session(45mins) and actual Threat Modelling session(45min)</p>"},{"location":"Security%20Design/TM/#outcomes","title":"Outcomes :","text":"<p>List of all found potential  vulnerabilities &amp; weaknesses and areas of improvement Prioritize list of challenges to be remediated</p>"},{"location":"Security%20Design/TM/#the-following-four-question-framework-can-help-to-organize-threat-modeling","title":"The following four question framework can help to organize threat modeling:","text":"<ul> <li>What are we working on?</li> <li>What can go wrong?</li> <li>What are we going to do about it?</li> <li>Did we do a good job?</li> </ul> <p>There are many methods or techniques that can be used to answer each of these questions. There is no \u201cright\u201d way to evaluate the search space of possible threats, but structured models exist in order to help make the process more efficient.</p>"},{"location":"Security%20Design/Security%20Checklist/","title":"Security Checklist","text":""},{"location":"Security%20Design/Security%20Checklist/#security-checklist","title":"Security Checklist","text":"<p>Close attention to requirements and how systems interact with their environment ensures that a software project starts building on the right foundation. Insecurities introduced in this early phase will only be compounded in later phases. When developers write requirements about what a system must do, they must also consider what a system must not do. When they write use cases, they need to write misuse/abuse cases to describe how a malicious user might interact with the system. When we consider both legitimate and illegitimate users, our guard is raised and the entire downstream process will benefit from this increased diligence.</p> <p>Another important aspect of requirements analysis is understanding risk. For security, this means understanding the business risk of a successful exploit against the application, how that exploit may affect users and what business processes would be necessary to manage damage control. The costs of liability, redevelopment and damage to brand image and market share needs to be understood up front. </p>"},{"location":"Security%20Design/Security%20Checklist/Access%20Control/","title":"Access Control","text":"<p>...</p> # Security Requirement CWE 1 Verify that the application enforces access control rules on a trusted service layer, especially if client-side access control is present and could be bypassed. CWE-602 2 Verify that all user and data attributes and policy information used by access controls cannot be manipulated by end users unless specifically authorized. CWE-639 3 Verify that the principle of least privilege exists - users should only be able to access functions, data files, URLs, controllers, services, and other resources, for which they possess specific authorization. This implies protection against spoofing and elevation of privilege. CWE-285 4 Verify that the principle of deny by default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned. CWE-276 5 Verify that access controls fail securely including when an exception occurs. CWE-285 6 Verify that sensitive data and APIs are protected against Insecure Direct Object Reference (IDOR) attacks targeting creation, reading, updating and deletion of records, such as creating or updating someone else's record, viewing everyone's records, or deleting all records. CWE-639 7 Verify that the application or framework enforces a strong anti-CSRF mechanism to protect authenticated functionality, and effective anti-automation or anti-CSRF protects unauthenticated functionality. CWE-352 8 Verify administrative interfaces use appropriate multi-factor authentication to prevent unauthorized use. CWE-419 9 Verify that directory browsing is disabled unless deliberately desired. Additionally, applications should not allow discovery or disclosure of file or directory metadata, such as Thumbs.db, .DS_Store, .git or .svn folders. CWE-548 10 Verify the application has additional authorization (such as step up or adaptive authentication) for lower value systems, and / or segregation of duties for high value applications to enforce anti-fraud controls as per the risk of application and past fraud. CWE-732 <p>...</p>"},{"location":"Security%20Design/Security%20Checklist/Architecture/","title":"Architecture","text":"<p>...</p> # Security Requirement CWE 1 Verify the use of a secure software development lifecycle that addresses security in all stages of development. . 2 Verify the use of threat modeling for every design change or sprint planning to identify threats, plan for countermeasures, facilitate appropriate risk responses, and guide security testing. CWE-1053 3 Verify that all user stories and features contain functional security constraints, such as \"As a user, I should be able to view and edit my profile. I should not be able to view or edit anyone else's profile\" CWE-1110 4 Verify documentation and justification of all the application's trust boundaries, components, and significant data flows. CWE-1059 5 Verify definition and security analysis of the application's high-level architecture and all connected remote services. CWE-1059 6 Verify implementation of centralized, simple (economy of design), vetted, secure, and reusable security controls to avoid duplicate, missing, ineffective, or insecure controls. CWE-637 7 Verify availability of a secure coding checklist, security requirements, guideline, or policy to all developers and testers. CWE-637 8 Verify the use of unique or special low-privilege operating system accounts for all application components, services, and servers. CWE-250 9 Verify that communications between application components, including APIs, middleware and data layers, are authenticated. Components should have the least necessary privileges needed. CWE-306 10 Verify that the application uses a single vetted authentication mechanism that is known to be secure, can be extended to include strong authentication, and has sufficient logging and monitoring to detect account abuse or breaches. CWE-306 11 Verify that all authentication pathways and identity management APIs implement consistent authentication security control strength, such that there are no weaker alternatives per the risk of the application. CWE-306 12 Verify that trusted enforcement points such as at access control gateways, servers, and serverless functions enforce access controls. Never enforce access controls on the client. CWE-602 13 Verify that the chosen access control solution is flexible enough to meet the application's needs. CWE-284 14 Verify enforcement of the principle of least privilege in functions, data files, URLs, controllers, services, and other resources. This implies protection against spoofing and elevation of privilege. CWE-272 15 Verify the application uses a single and well-vetted access control mechanism for accessing protected data and resources. All requests must pass through this single mechanism to avoid copy and paste or insecure alternative paths. CWE-284 16 Verify that attribute or feature-based access control is used whereby the code checks the user's authorization for a feature/data item rather than just their role. Permissions should still be allocated using roles. CWE-275 17 Verify that input and output requirements clearly define how to handle and process data based on type, content, and applicable laws, regulations, and other policy compliance. CWE-1029 18 Verify that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection. CWE-502 19 Verify that input validation is enforced on a trusted service layer. CWE-602 20 Verify that output encoding occurs close to or by the interpreter for which it is intended. CWE-116 21 Verify that there is an explicit policy for management of cryptographic keys and that a cryptographic key lifecycle follows a key management standard such as NIST SP 800-57. CWE-320 22 Verify that consumers of cryptographic services protect key material and other secrets by using key vaults or API based alternatives. CWE-320 23 Verify that all keys and passwords are replaceable and are part of a well-defined process to re-encrypt sensitive data. CWE-320 24 Verify that the architecture treats client-side secrets--such as symmetric keys, passwords, or API tokens--as insecure and never uses them to protect or access sensitive data. CWE-320 25 Verify that a common logging format and approach is used across the system. CWE-1009 26 Verify that logs are securely transmitted to a preferably remote system for analysis, detection, alerting, and escalation. . 27 Verify that all sensitive data is identified and classified into protection levels. . 28 Verify that all protection levels have an associated set of protection requirements, such as encryption requirements, integrity requirements, retention, privacy and other confidentiality requirements, and that these are applied in the architecture. . 29 Verify the application encrypts communications between components, particularly when these components are in different containers, systems, sites, or cloud providers. CWE-319 30 Verify that application components verify the authenticity of each side in a communication link to prevent person-in-the-middle attacks. For example, application components should validate TLS certificates and chains. CWE-295 31 Verify that a source code control system is in use, with procedures to ensure that check-ins are accompanied by issues or change tickets. The source code control system should have access control and identifiable users to allow traceability of any changes. CWE-284 32 Verify the definition and documentation of all application components in terms of the business or security functions they provide. CWE-1059 33 Verify that all high-value business logic flows, including authentication, session management and access control, do not share unsynchronized state. CWE-362 34 Verify that all high-value business logic flows, including authentication, session management and access control are thread safe and resistant to time-of-check and time-of-use race conditions. CWE-367 35 Verify that user-uploaded files are stored outside of the web root. CWE-552 36 Verify that user-uploaded files - if required to be displayed or downloaded from the application - are served by either octet stream downloads, or from an unrelated domain, such as a cloud file storage bucket. Implement a suitable Content Security Policy (CSP) to reduce the risk from XSS vectors or other attacks from the uploaded file. CWE-646 37 Verify the segregation of components of differing trust levels through well-defined security controls, firewall rules, API gateways, reverse proxies, cloud-based security groups, or similar mechanisms. CWE-923 38 Verify that binary signatures, trusted connections, and verified endpoints are used to deploy binaries to remote devices. CWE-494 39 Verify that the build pipeline warns of out-of-date or insecure components and takes appropriate actions. CWE-1104 40 Verify that the build pipeline contains a build step to automatically build and verify the secure deployment of the application, particularly if the application infrastructure is software defined, such as cloud environment build scripts. . 41 Verify that application deployments adequately sandbox, containerize and/or isolate at the network level to delay and deter attackers from attacking other applications, especially when they are performing sensitive or dangerous actions such as deserialization. CWE-265 42 Verify the application does not use unsupported, insecure, or deprecated client-side technologies such as NSAPI plugins, Flash, Shockwave, ActiveX, Silverlight, NACL, or client-side Java applets. CWE-477 <p>...</p>"},{"location":"Security%20Design/Security%20Checklist/Authentication/","title":"Authentication","text":"<p>...</p> # Security Requirement CWE 1 Verify that user set passwords are at least 12 characters in length (after multiple spaces are combined). CWE-521 2 Verify that passwords 64 characters or longer are permitted but may be no longer than 128 characters. CWE-521 3 Verify that password truncation is not performed. However, consecutive multiple spaces may be replaced by a single space. CWE-521 4 Verify that any printable Unicode character, including language neutral characters such as spaces and Emojis are permitted in passwords. CWE-521 5 Verify users can change their password. CWE-620 6 Verify that password change functionality requires the user's current and new password. CWE-620 7 Verify that passwords submitted during account registration, login, and password change are checked against a set of breached passwords either locally (such as the top 1,000 or 10,000 most common passwords which match the system's password policy) or using an external API. If using an API a zero knowledge proof or other mechanism should be used to ensure that the plain text password is not sent or used in verifying the breach status of the password. If the password is breached, the application must require the user to set a new non-breached password. CWE-521 8 Verify that a password strength meter is provided to help users set a stronger password. CWE-521 9 Verify that there are no password composition rules limiting the type of characters permitted. There should be no requirement for upper or lower case or numbers or special characters. CWE-521 10 Verify that there are no periodic credential rotation or password history requirements. CWE-263 11 Verify that \"paste\" functionality, browser password helpers, and external password managers are permitted. CWE-521 12 Verify that the user can choose to either temporarily view the entire masked password, or temporarily view the last typed character of the password on platforms that do not have this as built-in functionality. CWE-521 13 Verify that anti-automation controls are effective at mitigating breached credential testing, brute force, and account lockout attacks. Such controls include blocking the most common breached passwords, soft lockouts, rate limiting, CAPTCHA, ever increasing delays between attempts, IP address restrictions, or risk-based restrictions such as location, first login on a device, recent attempts to unlock the account, or similar. Verify that no more than 100 failed attempts per hour is possible on a single account. CWE-307 14 Verify that the use of weak authenticators (such as SMS and email) is limited to secondary verification and transaction approval and not as a replacement for more secure authentication methods. Verify that stronger methods are offered before weak methods, users are aware of the risks, or that proper measures are in place to limit the risks of account compromise. CWE-304 15 Verify that secure notifications are sent to users after updates to authentication details, such as credential resets, email or address changes, logging in from unknown or risky locations. The use of push notifications - rather than SMS or email - is preferred, but in the absence of push notifications, SMS or email is acceptable as long as no sensitive information is disclosed in the notification. CWE-620 16 Verify impersonation resistance against phishing, such as the use of multi-factor authentication, cryptographic devices with intent (such as connected keys with a push to authenticate), or at higher AAL levels, client-side certificates. CWE-308 17 Verify that where a Credential Service Provider (CSP) and the application verifying authentication are separated, mutually authenticated TLS is in place between the two endpoints. CWE-319 18 Verify replay resistance through the mandated use of One-time Passwords (OTP) devices, cryptographic authenticators, or lookup codes. CWE-308 19 Verify intent to authenticate by requiring the entry of an OTP token or user-initiated action such as a button press on a FIDO hardware key. CWE-308 20 Verify system generated initial passwords or activation codes SHOULD be securely randomly generated, SHOULD be at least 6 characters long, and MAY contain letters and numbers, and expire after a short period of time. These initial secrets must not be permitted to become the long term password. CWE-330 21 Verify that enrollment and use of subscriber-provided authentication devices are supported, such as a U2F or FIDO tokens. CWE-308 22 Verify that renewal instructions are sent with sufficient time to renew time bound authenticators. CWE-287 23 Verify that passwords are stored in a form that is resistant to offline attacks. Passwords SHALL be salted and hashed using an approved one-way key derivation or password hashing function. Key derivation and password hashing functions take a password, a salt, and a cost factor as inputs when generating a password hash. CWE-916 24 Verify that the salt is at least 32 bits in length and be chosen arbitrarily to minimize salt value collisions among stored hashes. For each credential, a unique salt value and the resulting hash SHALL be stored. CWE-916 25 Verify that if PBKDF2 is used, the iteration count SHOULD be as large as verification server performance will allow, typically at least 100,000 iterations. CWE-916 26 Verify that if bcrypt is used, the work factor SHOULD be as large as verification server performance will allow, typically at least 13. CWE-916 27 Verify that an additional iteration of a key derivation function is performed, using a salt value that is secret and known only to the verifier. Generate the salt value using an approved random bit generator [SP 800-90Ar1] and provide at least the minimum security strength specified in the latest revision of SP 800-131A. The secret salt value SHALL be stored separately from the hashed passwords (e.g., in a specialized device like a hardware security module). CWE-916 28 Verify that a system generated initial activation or recovery secret is not sent in clear text to the user. CWE-640 29 Verify password hints or knowledge-based authentication (so-called \"secret questions\") are not present. CWE-640 30 Verify password credential recovery does not reveal the current password in any way. CWE-640 31 Verify shared or default accounts are not present (e.g. \"root\", \"admin\", or \"sa\"). CWE-16 32 Verify that if an authentication factor is changed or replaced, that the user is notified of this event. CWE-304 33 Verify forgotten password, and other recovery paths use a secure recovery mechanism, such as time-based OTP (TOTP) or other soft token, mobile push, or another offline recovery mechanism. CWE-640 34 Verify that if OTP or multi-factor authentication factors are lost, that evidence of identity proofing is performed at the same level as during enrollment. CWE-308 35 Verify that lookup secrets can be used only once. CWE-308 36 Verify that lookup secrets have sufficient randomness (112 bits of entropy), or if less than 112 bits of entropy, salted with a unique and random 32-bit salt and hashed with an approved one-way hash. CWE-330 37 Verify that lookup secrets are resistant to offline attacks, such as predictable values. CWE-310 38 Verify that clear text out of band (NIST \"restricted\") authenticators, such as SMS or PSTN, are not offered by default, and stronger alternatives such as push notifications are offered first. CWE-287 39 Verify that the out of band verifier expires out of band authentication requests, codes, or tokens after 10 minutes. CWE-287 40 Verify that the out of band verifier authentication requests, codes, or tokens are only usable once, and only for the original authentication request. CWE-287 41 Verify that the out of band authenticator and verifier communicates over a secure independent channel. CWE-523 42 Verify that the out of band verifier retains only a hashed version of the authentication code. CWE-256 43 Verify that the initial authentication code is generated by a secure random number generator, containing at least 20 bits of entropy (typically a six digital random number is sufficient). CWE-310 44 Verify that time-based OTPs have a defined lifetime before expiring. CWE-613 45 Verify that symmetric keys used to verify submitted OTPs are highly protected, such as by using a hardware security module or secure operating system based key storage. CWE-320 46 Verify that approved cryptographic algorithms are used in the generation, seeding, and verification of OTPs. CWE-326 47 Verify that time-based OTP can be used only once within the validity period. CWE-287 48 Verify that if a time-based multi-factor OTP token is re-used during the validity period, it is logged and rejected with secure notifications being sent to the holder of the device. CWE-287 49 Verify physical single-factor OTP generator can be revoked in case of theft or other loss. Ensure that revocation is immediately effective across logged in sessions, regardless of location. CWE-613 50 Verify that biometric authenticators are limited to use only as secondary factors in conjunction with either something you have and something you know. CWE-308 51 Verify that cryptographic keys used in verification are stored securely and protected against disclosure, such as using a Trusted Platform Module (TPM) or Hardware Security Module (HSM), or an OS service that can use this secure storage. CWE-320 52 Verify that the challenge nonce is at least 64 bits in length, and statistically unique or unique over the lifetime of the cryptographic device. CWE-330 53 Verify that approved cryptographic algorithms are used in the generation, seeding, and verification. CWE-327 54 Verify that intra-service secrets do not rely on unchanging credentials such as passwords, API keys or shared accounts with privileged access. CWE-287 55 Verify that if passwords are required for service authentication, the service account used is not a default credential. (e.g. root/root or admin/admin are default in some services during installation). CWE-255 56 Verify that passwords are stored with sufficient protection to prevent offline recovery attacks, including local system access. CWE-522 57 Verify passwords, integrations with databases and third-party systems, seeds and internal secrets, and API keys are managed securely and not included in the source code or stored within source code repositories. Such storage SHOULD resist offline attacks. The use of a secure software key store (L1), hardware TPM, or an HSM (L3) is recommended for password storage. CWE-798 <p>...</p>"},{"location":"Security%20Design/Security%20Checklist/Business%20Logic/","title":"Business Logic","text":"<p>...</p> # Security Requirement CWE 1 Verify the application will only process business logic flows for the same user in sequential step order and without skipping steps. CWE-841 2 Verify the application will only process business logic flows with all steps being processed in realistic human time, i.e. transactions are not submitted too quickly. CWE-799 3 Verify the application has appropriate limits for specific business actions or transactions which are correctly enforced on a per user basis. CWE-770 4 Verify the application has sufficient anti-automation controls to detect and protect against data exfiltration, excessive business logic requests, excessive file uploads or denial of service attacks. CWE-770 5 Verify the application has business logic limits or validation to protect against likely business risks or threats, identified using threat modeling or similar methodologies. CWE-841 6 Verify the application does not suffer from \"Time Of Check to Time Of Use\" (TOCTOU) issues or other race conditions for sensitive operations. CWE-367 7 Verify the application monitors for unusual events or activity from a business logic perspective. For example, attempts to perform actions out of order or actions which a normal user would never attempt. CWE-754 8 Verify the application has configurable alerting when automated attacks or unusual activity is detected. CWE-390 <p>...</p>"},{"location":"Security%20Design/Security%20Checklist/Communication%20Security/","title":"Communication Security","text":"<p>...</p> # Security Requirement CWE 1 Verify that secured TLS is used for all client connectivity, and does not fall back to insecure or unencrypted protocols. CWE-319 2 Verify using online or up to date TLS testing tools that only strong algorithms, ciphers, and protocols are enabled, with the strongest algorithms and ciphers set as preferred. CWE-326 3 Verify that old versions of SSL and TLS protocols, algorithms, ciphers, and configuration are disabled, such as SSLv2, SSLv3, or TLS 1.0 and TLS 1.1. The latest version of TLS should be the preferred cipher suite. CWE-326 4 Verify that connections to and from the server use trusted TLS certificates. Where internally generated or self-signed certificates are used, the server must be configured to only trust specific internal CAs and specific self-signed certificates. All others should be rejected. CWE-295 5 Verify that encrypted communications such as TLS is used for all inbound and outbound connections, including for management ports, monitoring, authentication, API, or web service calls, database, cloud, serverless, mainframe, external, and partner connections. The server must not fall back to insecure or unencrypted protocols. CWE-319 6 Verify that all encrypted connections to external systems that involve sensitive information or functions are authenticated. CWE-287 7 Verify that proper certification revocation, such as Online Certificate Status Protocol (OCSP) Stapling, is enabled and configured. CWE-299 8 Verify that backend TLS connection failures are logged. CWE-544 <p>...</p>"},{"location":"Security%20Design/Security%20Checklist/Configuration%20and%20Operations/","title":"Configuration and Operations","text":"<p>...</p> # Security Requirement CWE 1 Verify that the application build and deployment processes are performed in a secure and repeatable way, such as CI / CD automation, automated configuration management, and automated deployment scripts. . 2 Verify that compiler flags are configured to enable all available buffer overflow protections and warnings, including stack randomization, data execution prevention, and to break the build if an unsafe pointer, memory, format string, integer, or string operations are found. CWE-120 3 Verify that server configuration is hardened as per the recommendations of the application server and frameworks in use. CWE-16 4 Verify that the application, configuration, and all dependencies can be re-deployed using automated deployment scripts, built from a documented and tested runbook in a reasonable time, or restored from backups in a timely fashion. . 5 Verify that authorized administrators can verify the integrity of all security-relevant configurations to detect tampering. . 6 Verify that all components are up to date, preferably using a dependency checker during build or compile time. (C2) CWE-1026 7 Verify that all unneeded features, documentation, samples, configurations are removed, such as sample applications, platform documentation, and default or example users. CWE-1002 8 Verify that if application assets, such as JavaScript libraries, CSS stylesheets or web fonts, are hosted externally on a content delivery network (CDN) or external provider, Subresource Integrity (SRI) is used to validate the integrity of the asset. CWE-829 9 Verify that third party components come from pre-defined, trusted and continually maintained repositories. (C2) CWE-829 10 Verify that an inventory catalog is maintained of all third party libraries in use. (C2) . 11 Verify that the attack surface is reduced by sandboxing or encapsulating third party libraries to expose only the required behaviour into the application. (C2) CWE-265 12 Verify that web or application server and framework error messages are configured to deliver user actionable, customized responses to eliminate any unintended security disclosures. CWE-209 13 Verify that web or application server and application framework debug modes are disabled in production to eliminate debug features, developer consoles, and unintended security disclosures. CWE-497 14 Verify that the HTTP headers or any part of the HTTP response do not expose detailed version information of system components. CWE-200 15 Verify that every HTTP response contains a Content-Type header. text/, /*+xml and application/xml content types should also specify a safe character set (e.g., UTF-8, ISO-8859-1). CWE-173 16 Verify that all API responses contain Content-Disposition: attachment; filename=\"api.json\" header (or other appropriate filename for the content type). CWE-116 17 Verify that a Content Security Policy (CSP) response header is in place that helps mitigate impact for XSS attacks like HTML, DOM, JSON, and JavaScript injection vulnerabilities. CWE-1021 18 Verify that all responses contain a X-Content-Type-Options: nosniff header. CWE-116 19 Verify that a Strict-Transport-Security header is included on all responses and for all subdomains, such as Strict-Transport-Security: max-age=15724800; includeSubdomains. CWE-523 20 Verify that a suitable \"Referrer-Policy\" header is included, such as \"no-referrer\" or \"same-origin\". CWE-116 21 Verify that the content of a web application cannot be embedded in a third-party site by default and that embedding of the exact resources is only allowed where necessary by using suitable Content-Security-Policy: frame-ancestors and X-Frame-Options response headers. CWE-346 22 Verify that the application server only accepts the HTTP methods in use by the application/API, including pre-flight OPTIONS, and logs/alerts on any requests that are not valid for the application context. CWE-749 23 Verify that the supplied Origin header is not used for authentication or access control decisions, as the Origin header can easily be changed by an attacker. CWE-346 24 Verify that the Cross-Origin Resource Sharing (CORS) Access-Control-Allow-Origin header uses a strict allow list of trusted domains and subdomains to match against and does not support the \"null\" origin. CWE-346 25 Verify that HTTP headers added by a trusted proxy or SSO devices, such as a bearer token, are authenticated by the application. CWE-306 <p>...</p>"},{"location":"Security%20Design/Security%20Checklist/Cryptography/","title":"Cryptography","text":"<p>...</p> # Security Requirement CWE 1 Verify that regulated private data is stored encrypted while at rest, such as Personally Identifiable Information (PII), sensitive personal information, or data assessed likely to be subject to EU's GDPR. CWE-311 2 Verify that regulated health data is stored encrypted while at rest, such as medical records, medical device details, or de-anonymized research records. CWE-311 3 Verify that regulated financial data is stored encrypted while at rest, such as financial accounts, defaults or credit history, tax records, pay history, beneficiaries, or de-anonymized market or research records. CWE-311 4 Verify that all cryptographic modules fail securely, and errors are handled in a way that does not enable Padding Oracle attacks. CWE-310 5 Verify that industry proven or government approved cryptographic algorithms, modes, and libraries are used, instead of custom coded cryptography. CWE-327 6 Verify that encryption initialization vector, cipher configuration, and block modes are configured securely using the latest advice. CWE-326 7 Verify that random number, encryption or hashing algorithms, key lengths, rounds, ciphers or modes, can be reconfigured, upgraded, or swapped at any time, to protect against cryptographic breaks. CWE-326 8 Verify that known insecure block modes (i.e. ECB, etc.), padding modes (i.e. PKCS#1 v1.5, etc.), ciphers with small block sizes (i.e. Triple-DES, Blowfish, etc.), and weak hashing algorithms (i.e. MD5, SHA1, etc.) are not used unless required for backwards compatibility. CWE-326 9 Verify that nonces, initialization vectors, and other single use numbers must not be used more than once with a given encryption key. The method of generation must be appropriate for the algorithm being used. CWE-326 10 Verify that encrypted data is authenticated via signatures, authenticated cipher modes, or HMAC to ensure that ciphertext is not altered by an unauthorized party. CWE-326 11 Verify that all cryptographic operations are constant-time, with no 'short-circuit' operations in comparisons, calculations, or returns, to avoid leaking information. CWE-385 12 Verify that all random numbers, random file names, random GUIDs, and random strings are generated using the cryptographic module's approved cryptographically secure random number generator when these random values are intended to be not guessable by an attacker. CWE-338 13 Verify that random GUIDs are created using the GUID v4 algorithm, and a Cryptographically-secure Pseudo-random Number Generator (CSPRNG). GUIDs created using other pseudo-random number generators may be predictable. CWE-338 14 Verify that random numbers are created with proper entropy even when the application is under heavy load, or that the application degrades gracefully in such circumstances. CWE-338 15 Verify that a secrets management solution such as a key vault is used to securely create, store, control access to and destroy secrets CWE-798 16 Verify that key material is not exposed to the application but instead uses an isolated security module like a vault for cryptographic operations. CWE-320 <p>...</p>"},{"location":"Security%20Design/Security%20Checklist/Data%20Protection/","title":"Data Protection","text":"<p>...</p> # Security Requirement CWE 1 Verify the application protects sensitive data from being cached in server components such as load balancers and application caches. CWE-524 2 Verify that all cached or temporary copies of sensitive data stored on the server are protected from unauthorized access or purged/invalidated after the authorized user accesses the sensitive data. CWE-524 3 Verify the application minimizes the number of parameters in a request, such as hidden fields, Ajax variables, cookies and header values. CWE-233 4 Verify the application can detect and alert on abnormal numbers of requests, such as by IP, user, total per hour or day, or whatever makes sense for the application. CWE-770 5 Verify that regular backups of important data are performed and that test restoration of data is performed. CWE-19 6 Verify that backups are stored securely to prevent data from being stolen or corrupted. CWE-19 7 Verify the application sets sufficient anti-caching headers so that sensitive data is not cached in modern browsers. CWE-525 8 CWE-922 9 Verify that authenticated data is cleared from client storage, such as the browser DOM, after the client or session is terminated. CWE-922 10 Verify that sensitive data is sent to the server in the HTTP message body or headers, and that query string parameters from any HTTP verb do not contain sensitive data. CWE-319 11 Verify that users have a method to remove or export their data on demand. CWE-212 12 Verify that users are provided clear language regarding collection and use of supplied personal information and that users have provided opt-in consent for the use of that data before it is used in any way. CWE-285 13 Verify that all sensitive data created and processed by the application has been identified, and ensure that a policy is in place on how to deal with sensitive data. CWE-200 14 Verify accessing sensitive data is audited (without logging the sensitive data itself), if the data is collected under relevant data protection directives or where logging of access is required. CWE-532 15 Verify that sensitive information contained in memory is overwritten as soon as it is no longer required to mitigate memory dumping attacks, using zeroes or random data. CWE-226 16 Verify that sensitive or private information that is required to be encrypted, is encrypted using approved algorithms that provide both confidentiality and integrity. CWE-327 17 Verify that sensitive personal information is subject to data retention classification, such that old or out of date data is deleted automatically, on a schedule, or as the situation requires. CWE-285 <p>...</p>"},{"location":"Security%20Design/Security%20Checklist/Error%20Handling%20and%20Logging/","title":"Error Handling and Logging","text":"<p>...</p> # Security Requirement CWE 1 Verify that the application does not log credentials or payment details. Session tokens should only be stored in logs in an irreversible, hashed form. CWE-532 2 Verify that the application does not log other sensitive data as defined under local privacy laws or relevant security policy. CWE-532 3 Verify that the application logs security relevant events including successful and failed authentication events, access control failures, deserialization failures and input validation failures. CWE-778 4 Verify that each log event includes necessary information that would allow for a detailed investigation of the timeline when an event happens. CWE-778 5 Verify that all authentication decisions are logged, without storing sensitive session identifiers or passwords. This should include requests with relevant metadata needed for security investigations. CWE-778 6 Verify that all access control decisions can be logged and all failed decisions are logged. This should include requests with relevant metadata needed for security investigations. CWE-285 7 Verify that the application appropriately encodes user-supplied data to prevent log injection. CWE-117 8 Verify that all events are protected from injection when viewed in log viewing software. CWE-117 9 Verify that security logs are protected from unauthorized access and modification. CWE-200 10 Verify that time sources are synchronized to the correct time and time zone. Strongly consider logging only in UTC if systems are global to assist with post-incident forensic analysis. . 11 Verify that a generic message is shown when an unexpected or security sensitive error occurs, potentially with a unique ID which support personnel can use to investigate. CWE-210 12 Verify that exception handling (or a functional equivalent) is used across the codebase to account for expected and unexpected error conditions. CWE-544 13 Verify that a \"last resort\" error handler is defined which will catch all unhandled exceptions. CWE-431 <p>...</p>"},{"location":"Security%20Design/Security%20Checklist/Files%20and%20Resources/","title":"Files and Resources","text":"<p>...</p> # Security Requirement CWE 1 Verify that the application will not accept large files that could fill up storage or cause a denial of service. CWE-400 2 Verify that compressed files are checked for \"zip bombs\" - small input files that will decompress into huge files thus exhausting file storage limits. CWE-409 3 Verify that a file size quota and maximum number of files per user is enforced to ensure that a single user cannot fill up the storage with too many files, or excessively large files. CWE-770 4 Verify that files obtained from untrusted sources are validated to be of expected type based on the file's content. CWE-434 5 Verify that user-submitted filename metadata is not used directly by system or framework filesystems and that a URL API is used to protect against path traversal. CWE-22 6 Verify that user-submitted filename metadata is validated or ignored to prevent the disclosure, creation, updating or removal of local files (LFI). CWE-73 7 Verify that user-submitted filename metadata is validated or ignored to prevent the disclosure or execution of remote files via Remote File Inclusion (RFI) or Server-side Request Forgery (SSRF) attacks. CWE-98 8 Verify that the application protects against Reflective File Download (RFD) by validating or ignoring user-submitted filenames in a JSON, JSONP, or URL parameter, the response Content-Type header should be set to text/plain, and the Content-Disposition header should have a fixed filename. CWE-641 9 Verify that untrusted file metadata is not used directly with system API or libraries, to protect against OS command injection. CWE-78 10 Verify that the application does not include and execute functionality from untrusted sources, such as unverified content distribution networks, JavaScript libraries, node npm libraries, or server-side DLLs. CWE-829 11 Verify that files obtained from untrusted sources are stored outside the web root, with limited permissions, preferably with strong validation. CWE-922 12 Verify that files obtained from untrusted sources are scanned by antivirus scanners to prevent upload of known malicious content. CWE-509 13 Verify that the web tier is configured to serve only files with specific file extensions to prevent unintentional information and source code leakage. For example, backup files (e.g. .bak), temporary working files (e.g. .swp), compressed files (.zip, .tar.gz, etc) and other extensions commonly used by editors should be blocked unless required. CWE-552 14 Verify that direct requests to uploaded files will never be executed as HTML/JavaScript content. CWE-434 15 Verify that the web or application server is configured with an allow list of resources or systems to which the server can send requests or load data/files from. CWE-918 <p>...</p>"},{"location":"Security%20Design/Security%20Checklist/Input%20and%20Output%20Validation/","title":"Input and Output Validation","text":"<p>...</p> # Security Requirement CWE 1 Verify that the application has defenses against HTTP parameter pollution attacks, particularly if the application framework makes no distinction about the source of request parameters (GET, POST, cookies, headers, or environment variables). CWE-235 2 Verify that frameworks protect against mass parameter assignment attacks, or that the application has countermeasures to protect against unsafe parameter assignment, such as marking fields private or similar. CWE-915 3 Verify that all input (HTML form fields, REST requests, URL parameters, HTTP headers, cookies, batch files, RSS feeds, etc) is validated using positive validation (allow lists). CWE-20 4 Verify that structured data is strongly typed and validated against a defined schema including allowed characters, length and pattern (e.g. credit card numbers or telephone, or validating that two related fields are reasonable, such as checking that suburb and zip/postcode match). CWE-20 5 Verify that URL redirects and forwards only allow destinations which appear on an allow list, or show a warning when redirecting to potentially untrusted content. CWE-601 6 Verify that all untrusted HTML input from WYSIWYG editors or similar is properly sanitized with an HTML sanitizer library or framework feature. CWE-116 7 Verify that unstructured data is sanitized to enforce safety measures such as allowed characters and length. CWE-138 8 Verify that the application sanitizes user input before passing to mail systems to protect against SMTP or IMAP injection. CWE-147 9 Verify that the application avoids the use of eval() or other dynamic code execution features. Where there is no alternative, any user input being included must be sanitized or sandboxed before being executed. CWE-95 10 Verify that the application protects against template injection attacks by ensuring that any user input being included is sanitized or sandboxed. CWE-94 11 Verify that the application protects against SSRF attacks, by validating or sanitizing untrusted data or HTTP file metadata, such as filenames and URL input fields, and uses allow lists of protocols, domains, paths and ports. CWE-918 12 Verify that the application sanitizes, disables, or sandboxes user-supplied Scalable Vector Graphics (SVG) scriptable content, especially as they relate to XSS resulting from inline scripts, and foreignObject. CWE-159 13 Verify that the application sanitizes, disables, or sandboxes user-supplied scriptable or expression template language content, such as Markdown, CSS or XSL stylesheets, BBCode, or similar. CWE-94 14 Verify that output encoding is relevant for the interpreter and context required. For example, use encoders specifically for HTML values, HTML attributes, JavaScript, URL parameters, HTTP headers, SMTP, and others as the context requires, especially from untrusted inputs (e.g. names with Unicode or apostrophes, such as \u306d\u3053 or O'Hara). CWE-116 15 Verify that output encoding preserves the user's chosen character set and locale, such that any Unicode character point is valid and safely handled. CWE-176 16 Verify that context-aware, preferably automated - or at worst, manual - output escaping protects against reflected, stored, and DOM based XSS. CWE-79 17 Verify that data selection or database queries (e.g. SQL, HQL, ORM, NoSQL) use parameterized queries, ORMs, entity frameworks, or are otherwise protected from database injection attacks. CWE-89 18 Verify that where parameterized or safer mechanisms are not present, context-specific output encoding is used to protect against injection attacks, such as the use of SQL escaping to protect against SQL injection. CWE-89 19 Verify that the application protects against JavaScript or JSON injection attacks, including for eval attacks, remote JavaScript includes, Content Security Policy (CSP) bypasses, DOM XSS, and JavaScript expression evaluation. CWE-830 20 Verify that the application protects against LDAP injection vulnerabilities, or that specific security controls to prevent LDAP injection have been implemented. CWE-943 21 Verify that the application protects against OS command injection and that operating system calls use parameterized OS queries or use contextual command line output encoding. CWE-78 22 Verify that the application protects against Local File Inclusion (LFI) or Remote File Inclusion (RFI) attacks. CWE-829 23 Verify that the application protects against XPath injection or XML injection attacks. CWE-643 24 Verify that the application uses memory-safe string, safer memory copy and pointer arithmetic to detect or prevent stack, buffer, or heap overflows. CWE-120 25 Verify that format strings do not take potentially hostile input, and are constant. CWE-134 26 Verify that sign, range, and input validation techniques are used to prevent integer overflows. CWE-190 27 Verify that serialized objects use integrity checks or are encrypted to prevent hostile object creation or data tampering. CWE-502 28 Verify that the application correctly restricts XML parsers to only use the most restrictive configuration possible and to ensure that unsafe features such as resolving external entities are disabled to prevent XML eXternal Entity (XXE) attacks. CWE-611 29 Verify that deserialization of untrusted data is avoided or is protected in both custom code and third-party libraries (such as JSON, XML and YAML parsers). CWE-502 30 Verify that when parsing JSON in browsers or JavaScript-based backends, JSON.parse is used to parse the JSON document. Do not use eval() to parse JSON. CWE-95 <p>...</p>"},{"location":"Security%20Design/Security%20Checklist/Malicious%20Code/","title":"Malicious Code","text":"<p>...</p> # Security Requirement CWE 1 Verify that a code analysis tool is in use that can detect potentially malicious code, such as time functions, unsafe file operations and network connections. CWE-749 2 Verify that the application source code and third party libraries do not contain unauthorized phone home or data collection capabilities. Where such functionality exists, obtain the user's permission for it to operate  before collecting any data. CWE-359 3 Verify that the application does not ask for unnecessary or excessive permissions to privacy related features or sensors, such as contacts, cameras, microphones, or location. CWE-272 4 Verify that the application source code and third party libraries do not contain back doors, such as hard-coded or additional undocumented accounts or keys, code obfuscation, undocumented binary blobs, rootkits, or anti-debugging, insecure debugging features, or otherwise out of date, insecure, or hidden functionality that could be used maliciously if discovered. CWE-507 5 Verify that the application source code and third party libraries do not contain time bombs by searching for date and time related functions. CWE-511 6 Verify that the application source code and third party libraries do not contain malicious code, such as salami attacks, logic bypasses, or logic bombs. CWE-511 7 Verify that the application source code and third party libraries do not contain Easter eggs or any other potentially unwanted functionality. CWE-507 8 Verify that if the application has a client or server auto-update feature, updates should be obtained over secure channels and digitally signed. The update code must validate the digital signature of the update before installing or executing the update. CWE-16 9 Verify that the application employs integrity protections, such as code signing or subresource integrity. The application must not load or execute code from untrusted sources, such as loading includes, modules, plugins, code, or libraries from untrusted sources or the Internet. CWE-353 10 Verify that the application has protection from subdomain takeovers if the application relies upon DNS entries or DNS subdomains, such as expired domain names, out of date DNS pointers or CNAMEs, expired projects at public source code repos, or transient cloud APIs, serverless functions, or storage buckets (autogen-bucket-id.cloud.example.com) or similar. Protections can include ensuring that DNS names used by applications are regularly checked for expiry or change. CWE-350 <p>...</p>"},{"location":"Security%20Design/Security%20Checklist/Session%20Management/","title":"Session Management","text":"<p>...</p> # Security Requirement CWE 1 Verify the application never reveals session tokens in URL parameters or error messages. CWE-598 2 Verify the application generates a new session token on user authentication. CWE-384 3 Verify that session tokens possess at least 64 bits of entropy. CWE-331 4 Verify the application only stores session tokens in the browser using secure methods such as appropriately secured cookies (see section 3.4) or HTML 5 session storage. CWE-539 5 Verify that session token are generated using approved cryptographic algorithms. CWE-331 6 Verify that logout and expiration invalidate the session token, such that the back button or a downstream relying party does not resume an authenticated session, including across relying parties. CWE-613 7 If authenticators permit users to remain logged in, verify that re-authentication occurs periodically both when actively used or after an idle period. CWE-613 * L1: 30 days * L2: 12 hours or 30 minutes of inactivity, 2FA optional * L3: 12 hours or 15 minutes of inactivity, with 2FA 8 Verify that the application gives the option to terminate all other active sessions after a successful password change (including change via password reset/recovery), and that this is effective across the application, federated login (if present), and any relying parties. CWE-613 9 Verify that users are able to view and (having re-entered login credentials) log out of any or all currently active sessions and devices. CWE-613 10 Verify that cookie-based session tokens have the 'Secure' attribute set. CWE-614 11 Verify that cookie-based session tokens have the 'HttpOnly' attribute set. CWE-1004 12 Verify that cookie-based session tokens utilize the 'SameSite' attribute to limit exposure to cross-site request forgery attacks. CWE-16 13 Verify that cookie-based session tokens use \"__Host-\" prefix (see references) to provide session cookie confidentiality. CWE-16 14 Verify that if the application is published under a domain name with other applications that set or use session cookies that might override or disclose the session cookies, set the path attribute in cookie-based session tokens using the most precise path possible. CWE-16 15 Verify the application allows users to revoke OAuth tokens that form trust relationships with linked applications. CWE-290 16 Verify the application uses session tokens rather than static API secrets and keys, except with legacy implementations. CWE-798 17 Verify that stateless session tokens use digital signatures, encryption, and other countermeasures to protect against tampering, enveloping, replay, null cipher, and key substitution attacks. CWE-345 18 Verify that relying parties specify the maximum authentication time to Credential Service Providers (CSPs) and that CSPs re-authenticate the subscriber if they haven't used a session within that period. CWE-613 19 Verify that Credential Service Providers (CSPs) inform Relying Parties (RPs) of the last authentication event, to allow RPs to determine if they need to re-authenticate the user. CWE-613 20 Verify the application ensures a valid login session or requires re-authentication or secondary verification before allowing any sensitive transactions or account modifications. CWE-778 <p>...</p>"},{"location":"Security%20Design/Security%20Checklist/Web%20Service/","title":"Web Service","text":"<p>...</p> # Security Requirement CWE 1 Verify that all application components use the same encodings and parsers to avoid parsing attacks that exploit different URI or file parsing behavior that could be used in SSRF and RFI attacks. CWE-116 2 Verify that access to administration and management functions is limited to authorized administrators. CWE-419 3 Verify API URLs do not expose sensitive information, such as the API key, session tokens etc. CWE-598 4 Verify that authorization decisions are made at both the URI, enforced by programmatic or declarative security at the controller or router, and at the resource level, enforced by model-based permissions. CWE-285 5 Verify that requests containing unexpected or missing content types are rejected with appropriate headers (HTTP response status 406 Unacceptable or 415 Unsupported Media Type). CWE-434 6 Verify that enabled RESTful HTTP methods are a valid choice for the user or action, such as preventing normal users using DELETE or PUT on protected API or resources. CWE-650 7 Verify that JSON schema validation is in place and verified before accepting input. CWE-20 8 Verify that RESTful web services that utilize cookies are protected from Cross-Site Request Forgery via the use of at least one or more of the following: double submit cookie pattern, CSRF nonces, or Origin request header checks. CWE-352 9 Verify that REST services have anti-automation controls to protect against excessive calls, especially if the API is unauthenticated. CWE-770 10 Verify that REST services explicitly check the incoming Content-Type to be the expected one, such as application/xml or application/json. CWE-436 11 Verify that the message headers and payload are trustworthy and not modified in transit. Requiring strong encryption for transport (TLS only) may be sufficient in many cases as it provides both confidentiality and integrity protection. Per-message digital signatures can provide additional assurance on top of the transport protections for high-security applications but bring with them additional complexity and risks to weigh against the benefits. CWE-345 12 Verify that XSD schema validation takes place to ensure a properly formed XML document, followed by validation of each input field before any processing of that data takes place. CWE-20 13 Verify that the message payload is signed using WS-Security to ensure reliable transport between client and service. CWE-345 14 Verify that a query allow list or a combination of depth limiting and amount limiting is used to prevent GraphQL or data layer expression Denial of Service (DoS) as a result of expensive, nested queries. For more advanced scenarios, query cost analysis should be used. CWE-770 15 Verify that GraphQL or other data layer authorization logic should be implemented at the business logic layer instead of the GraphQL layer. CWE-285 <p>...</p>"}]}