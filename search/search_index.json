{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Application Security","text":"<p>Welcome to Application Security Services and guidelines</p>"},{"location":"#purpose","title":"Purpose","text":"<p>Help engineering teams to build and operate more secure systems by incorporating Secuirty into their SDLC.</p>"},{"location":"#audience","title":"Audience","text":"<p>Software Engineering Teams at M&amp;S.</p>"},{"location":"#objectives","title":"Objectives","text":"<ul> <li>Reduce the vulnerabilities in M&amp;S applications by creating security automation,        collaborating with teams, creating and aiding with SSDLC standards</li> <li>Provide product health metrics and dashboards</li> <li>Strengthen application security through CI/CD using tooling, quality gates</li> <li>Engaging with engineering communities through their SLDC journey by providing Threat Modeling, workshops, Vulnerability Assessments, Remediation support.</li> </ul>"},{"location":"#triggers","title":"Triggers","text":"<ul> <li>When new applications are being onboarded via Ecosystem builder</li> <li>When In-Scope pull requests, repository and central software repo commits are made</li> <li>When security design reviews are performed</li> <li>When collaborative orchestra action items are raised</li> <li>When requests are raised via Zerodai or other channels</li> <li>Threat modelling during feature planning and design reviews</li> <li>When software vulnerabilities are identified</li> </ul>"},{"location":"#capabilities","title":"Capabilities","text":"<ul> <li>Threat Modeling</li> <li>Security testing </li> <li>CI/CD security and tooling - SAST,SCA,Secret Scanning and DAST</li> <li>Vulnerability remediation</li> </ul>"},{"location":"AppSecTesting/DAST/","title":"Application Security","text":"<p>Welcome to Application Security Services and guidelines</p>"},{"location":"AppSecTesting/DAST/#purpose","title":"Purpose","text":"<p>Help engineering teams to build and operate more secure systems by incorporating Secuirty into their SDLC.</p>"},{"location":"AppSecTesting/DAST/#audience","title":"Audience","text":"<p>Software Engineering Teams at M&amp;S.</p>"},{"location":"AppSecTesting/DAST/#objectives","title":"Objectives","text":"<ul> <li>Reduce the vulnerabilities in M&amp;S applications by creating security automation,        collaborating with teams, creating and aiding with SSDLC standards</li> <li>Provide product health metrics and dashboards</li> <li>Strengthen application security through CI/CD using tooling, quality gates</li> <li>Engaging with engineering communities through their SLDC journey by providing Threat Modeling, workshops, Vulnerability Assessments, Remediation support.</li> </ul>"},{"location":"AppSecTesting/DAST/#triggers","title":"Triggers","text":"<ul> <li>When new applications are being onboarded via Ecosystem builder</li> <li>When In-Scope pull requests, repository and central software repo commits are made</li> <li>When security design reviews are performed</li> <li>When collaborative orchestra action items are raised</li> <li>When requests are raised via Zerodai or other channels</li> <li>Threat modelling during feature planning and design reviews</li> <li>When software vulnerabilities are identified</li> </ul>"},{"location":"AppSecTesting/DAST/#capabilities","title":"Capabilities","text":"<ul> <li>Threat Modeling</li> <li>Security testing </li> <li>CI/CD security and tooling - SAST,SCA,Secret Scanning and DAST</li> <li>Vulnerability remediation</li> </ul>"},{"location":"AppSecTesting/SAST%20-%20IDE%20Plugin/","title":"SAST IDE Plugin","text":"<p>This document provides user guidance to use Fortify Security assistant IDE plugins with IDEs Eclipse, Visual Studio and IntelliJ &amp; Android Studio.</p> <pre><code>For any queries reach out to AppSec  DL - InfoSec - Cloud-DevOps-Security &lt;DL-Infosec-Cloud-DevOps-Security@marks-and-spencer.com&gt;\n</code></pre>"},{"location":"AppSecTesting/SAST%20-%20IDE%20Plugin/#fortify-security-assistant-plugin-for-eclipse","title":"Fortify Security Assistant Plugin for Eclipse","text":"<p>Requirements -</p> <p>a. A valid license file from Fortify- M&amp;S authorized users can download the license file from the below fortify portal-</p> <p>https://emea.fortify.com/Tools/Downloads</p> <p>IMAGE</p> <p>b. Fortify_SecurityAssistant_Eclipse_Plugin - Download the plugin from the below website-</p> <p>https://marketplace.microfocus.com/cyberres/content/fortify-security-assistant-for-eclipse</p>"},{"location":"AppSecTesting/SAST%20-%20IDE%20Plugin/#to-install-fortify-security-assistant-for-eclipse","title":"To install Fortify Security Assistant for Eclipse:","text":"<ol> <li>Start Eclipse.</li> <li>Select Help &gt; Install New Software.</li> </ol> <p>The Install wizard starts and displays the Available Software step.</p> <ol> <li> <p>Click Add.</p> </li> <li> <p>Click Archive, and then locate and select Fortify_SecurityAssistant_Eclipse_Plugin_.zip.  <li> <p>Click Add.</p> </li> <li> <p>Select the Fortify Security Assistant Plugin check box.</p> </li> <p>IMAGE</p> <ol> <li>CLick Next.</li> </ol> <p>The Install Details step lists Fortify Security Assistant Plugin For Eclipse.</p> <p>To view version and copyright information about the plugin in the Details area, click the plugin name.</p> <ol> <li>Click Next.</li> <li>On the Review Licenses step, review and accept the license agreement.</li> <li>Click Finish.</li> <li>To complete the installation and restart Eclipse, click Restart Now when prompted.</li> </ol> <p>The menu bar now includes the Fortify menu.</p> <p>IMAGE 12. In the Locate Fortify License File dialog box, click Browse.</p> <ol> <li>Navigate to the fortify.license file, and then click OK.</li> </ol>"},{"location":"AppSecTesting/SAST%20-%20IDE%20Plugin/#to-review-the-security-issues","title":"To review the security issues:","text":"<p>Click on Open Security issues list under Fortify tab as shown below and place your cursor over the highlighted code to open a tooltip that displays one or more issues. Move your cursor into the Fortify Security Assistant for Eclipse tooltip or press F2 to access additional options.</p> <p>IMAGE</p> <p>You can also use Fortify Security Assistant for Eclipse to examine a project and identify any security issues.</p> <p>To scan a project for issues:</p> <p>Right-click the project name, and then select Inspect the Project.</p> <p>IMAGE</p>"},{"location":"AppSecTesting/SAST%20-%20IDE%20Plugin/#fortify-security-assistant-plugin-for-visual-studio","title":"Fortify Security Assistant Plugin for Visual Studio","text":"<p>Requirements -</p> <p>a. A valid license file from Fortify- M&amp;S authorized users can download the license file from the below fortify portal-</p> <p>https://emea.fortify.com/Tools/Downloads</p> <p>IMAGE</p> <pre><code>Note: To install this extension as an administrator and allow all users to use the extension, download the VSIX file from the Visual Studio Marketplace and then install it using VSIXInstaller with the /admin option from the Command Prompt.\n</code></pre>"},{"location":"AppSecTesting/SAST%20-%20IDE%20Plugin/#to-install-the-fortify-security-assistant-extension","title":"To install the Fortify Security Assistant extension:","text":"<ol> <li>In Visual Studio, select Extensions &gt; Manage Extensions.</li> <li>Search the Visual Studio Marketplace for Fortify Security Assistant.</li> <li>Download and install Fortify Security Assistant for Visual Studio. IMAGE The first time you install the extension, you are prompted to provide a license file and Micro Focus Fortify Software security content(select the default one like below).</li> </ol> <p>IMAGE</p>"},{"location":"AppSecTesting/SAST%20-%20IDE%20Plugin/#to-review-the-security-issues_1","title":"To review the security issues:","text":"<p>Pause your cursor over the highlighted code to open a tooltip that briefly describes the issue as shown in the following example: </p> <p>IMAGE</p> <p>Open the Error List window (the Warnings tab) to see possible security issues in open files.</p> <p>You can also analyze a solution and identify security issues. You cannot make any code changes during the analysis.</p> <p>To scan a solution for issues:</p> <p>From the Fortify Security Assistant extension menu, select Analyze Solution as shown below</p> <p>IMAGE</p>"},{"location":"AppSecTesting/SAST%20-%20IDE%20Plugin/#fortify-security-assistant-plugin-for-intellij-and-android-studio","title":"Fortify Security Assistant Plugin for IntelliJ and Android Studio","text":"<p>Requirements -</p> <p>a. A valid license file from Fortify- M&amp;S authorized users can download the license file from the below fortify portal-</p> <p>https://emea.fortify.com/Tools/Downloads</p> <p>IMAGE</p> <p>You can install Fortify Security Assistant on Windows, Linux, and macOS. The Fortify Security Assistant plugin is available for download from the JetBrains Marketplace.</p> <p>To install Fortify Security Assistant:</p> <ol> <li>Start IntelliJ IDEA or Android Studio.</li> <li> <p>Open the Settings dialog box as follows:</p> </li> <li> <p>On Windows or Linux, select File &gt; Settings.</p> </li> <li> <p>On macOS, select  &gt; Preferences. <li> <p>On the left pane, select Plugins.</p> </li> <li>Select the Marketplace tab, and then in the search box type Fortify Security Assistant.</li> <li>Click Install.</li> <li>Click OK.</li>"},{"location":"AppSecTesting/SAST%20-%20IDE%20Plugin/#to-configure-fortify-security-assistant","title":"To configure Fortify Security Assistant:","text":"<ol> <li>Open the Settings dialog box as follows:</li> </ol> <p>On Windows or Linux, select File &gt; Settings.</p> <p>On macOS, select  &gt; Preferences. <ol> <li> <p>In the search box, type fortify.</p> </li> <li> <p>Select Fortify Security Assistant in the left pane.</p> </li> </ol> <p>IMAGE</p> <ol> <li>To specify the license file, click Browse to the right of the License file box and navigate to the license file (fortify.license) on your system.</li> <li>To load or update Fortify security content stored locally:</li> </ol> <p>Select Use local Rulepack.</p> <p>Click Browse next to the Folder box and navigate to a folder on your system that contains the Rulepacks.</p> <p>The selected folder must contain Rulepacks as ZIP, XML, or BIN files.</p> <p>Click Load Security Content.</p> <ol> <li> <p>To download Fortify security content from a Rulepack update server or from Fortify Software Security Center:</p> </li> <li> <p>Select Use security content server.</p> </li> <li> <p>To download security content from the Fortify Rulepack update server, in the URL box, type a Rulepack server URL.</p> </li> <li> <p>The default is the Fortify Rulepack update server URL (https://update.fortify.com).</p> </li> </ol> <p>Note: Click Default to set the URL to the default Fortify Rulepack update server.</p> <ul> <li>To download security content from Fortify Software Security Center:</li> </ul> <p>In the URL box, type a Fortify Software Security Center URL.</p> <p>Select the Software Security Center check box.</p> <ul> <li>To use a proxy for connection to the security content server, select Use proxy, and then provide the following:</li> </ul> <p>The proxy server host name (for example, my.proxy.com)</p> <p>The proxy port number</p> <p>(Optional) Authentication credentials for the proxy server</p> <ul> <li>Click Check for Updates. Note: If you get an error that indicates the downloaded security content is unverified, you might have an invalid license file. Contact Micro Focus Fortify Customer Support for assistance.</li> </ul>"},{"location":"AppSecTesting/SAST%20-%20IDE%20Plugin/#to-review-the-security-issues_2","title":"To review the security issues:","text":"<p>To see a detailed description of an issue, from the code editor or the Fortify Security Assistant window, right-click the issue, and then select View Vulnerability Details.</p> <p>The Vulnerability Details window provides a detailed description of the issue, examples, and recommendations of how to fix the issue.</p> <ol> <li>Click OK.</li> </ol> <p>IMAGE</p> <p>You can also use Fortify Security Assistant to analyze the whole project (or a specific set of files) and identify security issues. You cannot make any code changes during the analysis.</p> <p>To scan a project for issues, perform a code inspection as follows:</p> <ul> <li> <p>In IntelliJ IDEA, select Code &gt; Inspect Code.</p> </li> <li> <p>In Android Studio, select Analyze &gt; Inspect Code.</p> </li> </ul>"},{"location":"AppSecTesting/SAST/","title":"Application Security","text":"<p>Welcome to Application Security Services and guidelines</p>"},{"location":"AppSecTesting/SAST/#purpose","title":"Purpose","text":"<p>Help engineering teams to build and operate more secure systems by incorporating Secuirty into their SDLC.</p>"},{"location":"AppSecTesting/SAST/#audience","title":"Audience","text":"<p>Software Engineering Teams at M&amp;S.</p>"},{"location":"AppSecTesting/SAST/#objectives","title":"Objectives","text":"<ul> <li>Reduce the vulnerabilities in M&amp;S applications by creating security automation,        collaborating with teams, creating and aiding with SSDLC standards</li> <li>Provide product health metrics and dashboards</li> <li>Strengthen application security through CI/CD using tooling, quality gates</li> <li>Engaging with engineering communities through their SLDC journey by providing Threat Modeling, workshops, Vulnerability Assessments, Remediation support.</li> </ul>"},{"location":"AppSecTesting/SAST/#triggers","title":"Triggers","text":"<ul> <li>When new applications are being onboarded via Ecosystem builder</li> <li>When In-Scope pull requests, repository and central software repo commits are made</li> <li>When security design reviews are performed</li> <li>When collaborative orchestra action items are raised</li> <li>When requests are raised via Zerodai or other channels</li> <li>Threat modelling during feature planning and design reviews</li> <li>When software vulnerabilities are identified</li> </ul>"},{"location":"AppSecTesting/SAST/#capabilities","title":"Capabilities","text":"<ul> <li>Threat Modeling</li> <li>Security testing </li> <li>CI/CD security and tooling - SAST,SCA,Secret Scanning and DAST</li> <li>Vulnerability remediation</li> </ul>"},{"location":"AppSecTesting/SCA/","title":"Application Security","text":"<p>Welcome to Application Security Services and guidelines</p>"},{"location":"AppSecTesting/SCA/#purpose","title":"Purpose","text":"<p>Help engineering teams to build and operate more secure systems by incorporating Secuirty into their SDLC.</p>"},{"location":"AppSecTesting/SCA/#audience","title":"Audience","text":"<p>Software Engineering Teams at M&amp;S.</p>"},{"location":"AppSecTesting/SCA/#objectives","title":"Objectives","text":"<ul> <li>Reduce the vulnerabilities in M&amp;S applications by creating security automation,        collaborating with teams, creating and aiding with SSDLC standards</li> <li>Provide product health metrics and dashboards</li> <li>Strengthen application security through CI/CD using tooling, quality gates</li> <li>Engaging with engineering communities through their SLDC journey by providing Threat Modeling, workshops, Vulnerability Assessments, Remediation support.</li> </ul>"},{"location":"AppSecTesting/SCA/#triggers","title":"Triggers","text":"<ul> <li>When new applications are being onboarded via Ecosystem builder</li> <li>When In-Scope pull requests, repository and central software repo commits are made</li> <li>When security design reviews are performed</li> <li>When collaborative orchestra action items are raised</li> <li>When requests are raised via Zerodai or other channels</li> <li>Threat modelling during feature planning and design reviews</li> <li>When software vulnerabilities are identified</li> </ul>"},{"location":"AppSecTesting/SCA/#capabilities","title":"Capabilities","text":"<ul> <li>Threat Modeling</li> <li>Security testing </li> <li>CI/CD security and tooling - SAST,SCA,Secret Scanning and DAST</li> <li>Vulnerability remediation</li> </ul>"},{"location":"AppSecTesting/Secret%20Scanning/","title":"Secret Scanning","text":""},{"location":"AppSecTesting/Secret%20Scanning/#secret-scanning","title":"Secret scanning","text":"<p>We can use TruffleHog in CI to prevent secrets from being merged in Git. This document explains how to integrate Trufflehog in DevOps pipeline in CI.</p> <p>At M&amp;S we use Trufflehog for scanning the repos for finding hardcoded secrets. </p>"},{"location":"AppSecTesting/Secret%20Scanning/#how-to-integrate","title":"How to integrate?","text":"<p>General approach : Platform independent CI integration-</p> <p>Option 1: Trufflehog Binary(Enterprise Scan)(Recommended)</p> <p>You can run Trufflehog Enterprise Scan with Trufflehog Binary using the below command-</p> <pre><code>\"curl -q \"https://storage.googleapis.com/thog-releases/trufflehog-scanner/latest/fetch.sh\" | bash\n            ./trufflehog --fail-verified git\"\n</code></pre> <p>curl command will fetch the Trufflehog scanner latest version for installation </p> <p>./trufflehog \u2013 does the actual scanning</p> <p>--fail-verified- Only emit failure code for verified findings.</p> <p>TruffleHog will return a non-zero exit code if there are findings.</p>"},{"location":"AppSecTesting/Secret%20Scanning/#azure-devops-pipeline-integration","title":"Azure DevOps pipeline Integration","text":"<pre><code>trigger:\n- 'develop'\n\n\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n  - task: Bash@3\n    inputs:\n      targetType: 'inline'\n      script: |\n        curl -q \"https://storage.googleapis.com/thog-releases/trufflehog-scanner/latest/fetch.sh\" | bash\n                ./trufflehog --fail-verified git\n                 status=$?\n                  echo $status\n                 if [ $status -eq 1 ]\n                then\n                 curl -H 'Content-Type: application/json' -d ' {\"text\":  \"Trufflehog Scan for the (ApplicationName) has secrets\"  }' $(WEBHOOK)\n                else\n                 echo \"Your application has no secrets\"\n                fi\n\nNote : In the place of (ApplicationName) in the curl command Mention the Application name which is to be integrated\n</code></pre>"},{"location":"AppSecTesting/Secret%20Scanning/#github-actions-pipeline-integration-","title":"Github Actions pipeline Integration-","text":"<pre><code>steps:\n    - uses: actions/checkout@v1\n    - name: trufflehog scanning\n      continue-on-error: false\n      run: |\n        curl -q \"https://storage.googleapis.com/thog-releases/trufflehog-scanner/latest/fetch.sh\" | bash\n        ./trufflehog --fail-verified git\n         if: always()\n    - name: Notify dedicated teams channel for secrets\n      if: failure() \n      run: |\n         curl -H 'Content-Type: application/json' -d ' {\"text\": \"Your application has secrets\" }'  ${{ secrets.webhook}}\n         echo \"Secrets found\"\n      continue-on-error: true \n    - name: Notify dedicated teams channel for secrets not found\n      if: success()\n      run: |\n            echo \"No Secrets\"\n            exit 0\n       continue-on-error: true\n\nNote : In the place of (ApplicationName) in the curl command Mention the Application name which is to be integrated\n\nNote - Another approach is to use the TruffleHog Enterprise Action which is recommended.\n</code></pre> <p>name: TruffleHog Enterprise scan</p> <pre><code>on: [push, pull_request]\n\njobs:\n  scanning:\n    name: TruffleHog Enterprise scan\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0 # fetch all history so multiple commits can be scanned\n      - name: TruffleHog Enterprise scan\n        uses: trufflesecurity/TruffleHog-Enterprise-Github-Action@main\n        with:\n            args: --fail-verified ${{ github.event.repository.default_branch }} HEAD\n\nNote : In the place of (ApplicationName) in the curl command Mention the Application name which is to be integrated\n</code></pre>"},{"location":"AppSecTesting/Secret%20Scanning/#references","title":"References","text":"<p>https://docs.trufflesecurity.com/docs/scanning-git/scanning-in-ci/</p> <p>https://github.com/trufflesecurity/trufflehog</p> <p>Contact the team for any clarification- dl-appsecteam@marks-and-spencer.com</p>"},{"location":"ApplicationDesign/TM/","title":"Threat Modeling: Introduction and Workflow","text":"<p>Threat modeling works to identify, communicate, and understand threats and mitigations within the context of protecting something of value.</p> <p>A threat model is a structured representation of all the information that affects the security of an application.</p>"},{"location":"ApplicationDesign/TM/#why-should-we-do-threat-modeling","title":"Why should we do Threat Modeling?","text":"<ul> <li>Makes our software more secure</li> <li>Little time investment early means saved time later</li> <li>Saves M&amp;S money and reputation</li> <li>It's easy to get started</li> </ul>"},{"location":"ApplicationDesign/TM/#to-get-started","title":"To get started:","text":"<p>Raise a request on InfoSec Hub https://cyb-eun-prd-cygraph-app1.azurewebsites.net/demand/catalogue </p> <p>Raise the request under \"Request for AppSec Security Assistance\" on Infosec hub</p> <p>Please send us links to your projects, codebase and architecture diagrams</p> <p>We will arrange 2 sessions: intro session(45mins) and actual Threat Modelling session(45min)</p>"},{"location":"ApplicationDesign/TM/#outcomes","title":"Outcomes :","text":"<p>List of all found potential  vulnerabilities &amp; weaknesses and areas of improvement Prioritize list of challenges to be remediated</p>"},{"location":"ApplicationDesign/TM/#the-following-four-question-framework-can-help-to-organize-threat-modeling","title":"The following four question framework can help to organize threat modeling:","text":"<ul> <li>What are we working on?</li> <li>What can go wrong?</li> <li>What are we going to do about it?</li> <li>Did we do a good job?</li> </ul> <p>There are many methods or techniques that can be used to answer each of these questions. There is no \u201cright\u201d way to evaluate the search space of possible threats, but structured models exist in order to help make the process more efficient.</p>"},{"location":"Awareness/ImmersiveLabs/","title":"Immersive Labs","text":"<p>Immersive Labs is a lab absed learning platform that helps engineers develop their skills in cyber security. With something to suit all the roles from administration to technical architecture, to information governance and cyber analysis \u2013 it offers customised training all under one platform.</p>"},{"location":"Awareness/ImmersiveLabs/#request-immersive-labs-access-in-aig","title":"Request Immersive Labs Access in AIG :","text":"<p>Clickhere</p>"},{"location":"Awareness/ImmersiveLabs/#login-to-immersive-labs-through-below-url","title":"Login to Immersive Labs through below URL:","text":"<p>Clickhere</p>"},{"location":"Awareness/SKF/","title":"Security Knoweldge Framework(SKF)?","text":"<p>The OWASP Security Knowledge Framework is an open source web application that explains secure coding principles in multiple programming languages. The goal of OWASP-SKF is to help you learn and integrate security by design in your software development and build applications that are secure by design.</p>"},{"location":"Awareness/SKF/#how-to-access-skf","title":"How to access SKF?","text":"<p>Provide details here.</p>"},{"location":"Checklist/Access%20Control/","title":"Access Control","text":"<p>...</p> # Security Requirement CWE 1 Always apply the principle of complete mediation, forcing all requests through a common security \"gate keeper.\" This ensures that access control checks are triggered whether or not the user is authenticated. CWE-284 2 Make use of a Mandatory Access Control system. All access decisions will be based on the principle of least privilege. If not explicitly allowed then access should be denied. Additionally, after an account is created, rights must be specifically added to that account to grant access to resources. CWE-272,CWE-250 3 Do not allow direct references to files or parameters that can be manipulated to grant excessive access. Access control decisions must be based on the authenticated user identity and trusted server side information. CWE-284 4 An unvalidated forward can allow an attacker to access private content without authentication. Unvalidated redirects allow an attacker to lure victims into visiting malicious sites. Prevent these from occurring by conducting the appropriate access controls checks before sending the user to the given location. CWE-601 <p>...</p>"},{"location":"Checklist/Architecture/","title":"Architecture","text":"<p>...</p> Architecture . ..1 # Security Requirement CWE 1 Verify the use of a secure software development lifecycle that addresses security in all stages of development. . 2 Verify the use of threat modeling for every design change or sprint planning to identify threats, plan for countermeasures, facilitate appropriate risk responses, and guide security testing. CWE-1053 3 Verify that all user stories and features contain functional security constraints, such as \"As a user, I should be able to view and edit my profile. I should not be able to view or edit anyone else's profile\" CWE-1110 4 Verify documentation and justification of all the application's trust boundaries, components, and significant data flows. CWE-1059 5 Verify definition and security analysis of the application's high-level architecture and all connected remote services. CWE-1059 6 Verify implementation of centralized, simple (economy of design), vetted, secure, and reusable security controls to avoid duplicate, missing, ineffective, or insecure controls. CWE-637 7 Verify availability of a secure coding checklist, security requirements, guideline, or policy to all developers and testers. CWE-637 8 Verify the use of unique or special low-privilege operating system accounts for all application components, services, and servers. CWE-250 9 Verify that communications between application components, including APIs, middleware and data layers, are authenticated. Components should have the least necessary privileges needed. CWE-306 10 Verify that the application uses a single vetted authentication mechanism that is known to be secure, can be extended to include strong authentication, and has sufficient logging and monitoring to detect account abuse or breaches. CWE-306 11 Verify that all authentication pathways and identity management APIs implement consistent authentication security control strength, such that there are no weaker alternatives per the risk of the application. CWE-306 12 Verify that trusted enforcement points such as at access control gateways, servers, and serverless functions enforce access controls. Never enforce access controls on the client. CWE-602 13 Verify that the chosen access control solution is flexible enough to meet the application's needs. CWE-284 14 Verify enforcement of the principle of least privilege in functions, data files, URLs, controllers, services, and other resources. This implies protection against spoofing and elevation of privilege. CWE-272 15 Verify the application uses a single and well-vetted access control mechanism for accessing protected data and resources. All requests must pass through this single mechanism to avoid copy and paste or insecure alternative paths. CWE-284 16 Verify that attribute or feature-based access control is used whereby the code checks the user's authorization for a feature/data item rather than just their role. Permissions should still be allocated using roles. CWE-275 17 Verify that input and output requirements clearly define how to handle and process data based on type, content, and applicable laws, regulations, and other policy compliance. CWE-1029 18 Verify that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection. CWE-502 19 Verify that input validation is enforced on a trusted service layer. CWE-602 20 Verify that output encoding occurs close to or by the interpreter for which it is intended. CWE-116 21 Verify that there is an explicit policy for management of cryptographic keys and that a cryptographic key lifecycle follows a key management standard such as NIST SP 800-57. CWE-320 22 Verify that consumers of cryptographic services protect key material and other secrets by using key vaults or API based alternatives. CWE-320 23 Verify that all keys and passwords are replaceable and are part of a well-defined process to re-encrypt sensitive data. CWE-320 24 Verify that the architecture treats client-side secrets--such as symmetric keys, passwords, or API tokens--as insecure and never uses them to protect or access sensitive data. CWE-320 25 Verify that a common logging format and approach is used across the system. CWE-1009 26 Verify that logs are securely transmitted to a preferably remote system for analysis, detection, alerting, and escalation. . 27 Verify that all sensitive data is identified and classified into protection levels. . 28 Verify that all protection levels have an associated set of protection requirements, such as encryption requirements, integrity requirements, retention, privacy and other confidentiality requirements, and that these are applied in the architecture. . 29 Verify the application encrypts communications between components, particularly when these components are in different containers, systems, sites, or cloud providers. CWE-319 30 Verify that application components verify the authenticity of each side in a communication link to prevent person-in-the-middle attacks. For example, application components should validate TLS certificates and chains. CWE-295 31 Verify that a source code control system is in use, with procedures to ensure that check-ins are accompanied by issues or change tickets. The source code control system should have access control and identifiable users to allow traceability of any changes. CWE-284 32 Verify the definition and documentation of all application components in terms of the business or security functions they provide. CWE-1059 33 Verify that all high-value business logic flows, including authentication, session management and access control, do not share unsynchronized state. CWE-362 34 Verify that all high-value business logic flows, including authentication, session management and access control are thread safe and resistant to time-of-check and time-of-use race conditions. CWE-367 35 Verify that user-uploaded files are stored outside of the web root. CWE-552 36 Verify that user-uploaded files - if required to be displayed or downloaded from the application - are served by either octet stream downloads, or from an unrelated domain, such as a cloud file storage bucket. Implement a suitable Content Security Policy (CSP) to reduce the risk from XSS vectors or other attacks from the uploaded file. CWE-646 37 Verify the segregation of components of differing trust levels through well-defined security controls, firewall rules, API gateways, reverse proxies, cloud-based security groups, or similar mechanisms. CWE-923 38 Verify that binary signatures, trusted connections, and verified endpoints are used to deploy binaries to remote devices. CWE-494 39 Verify that the build pipeline warns of out-of-date or insecure components and takes appropriate actions. CWE-1104 40 Verify that the build pipeline contains a build step to automatically build and verify the secure deployment of the application, particularly if the application infrastructure is software defined, such as cloud environment build scripts. . 41 Verify that application deployments adequately sandbox, containerize and/or isolate at the network level to delay and deter attackers from attacking other applications, especially when they are performing sensitive or dangerous actions such as deserialization. CWE-265 42 Verify the application does not use unsupported, insecure, or deprecated client-side technologies such as NSAPI plugins, Flash, Shockwave, ActiveX, Silverlight, NACL, or client-side Java applets. CWE-477 <p>...</p>"},{"location":"Checklist/Authentication/","title":"Authentication","text":"<p>...</p> Authentication . ..1 # Security Requirement CWE 1 Never allow credentials to be stored directly within the application code. While it can be convenient to test application code with hardcoded credentials during development this significantly increases risk and should be avoided. CWE-798 2 Password reset systems are often the weakest link in an application. These systems are often based on the user answering personal questions to establish their identity and in turn reset the password. The system needs to be based on questions that are both hard to guess and brute force. Additionally, any password reset option must not reveal whether or not an account is valid, preventing username harvesting. CWE-640 3 For password based authentication, password policy should be created and implemented so that passwords meet specific strength criteria. If the user base and application can support it, leverage the various forms of passwordless authentication such as FIDO2 based authentication or mobile application push based authenticators. CWE-521 4 Account lockout needs to be implemented to guard against brute forcing attacks against both the authentication and password reset functionality. After several tries on a specific user account, the account should be locked for a period of time or until manually unlocked. Additionally, it is best to continue the same failure message indicating that the credentials are incorrect or the account is locked to prevent an attacker from harvesting usernames. CWE-307 5 Messages for authentication errors must be clear and, at the same time, be written so that sensitive information about the system is not disclosed. For example, error messages which reveal that the userid is valid but that the corresponding password is incorrect confirms to an attacker that the account does exist on the system. . 6 Modern web applications usually consist of multiple layers. The business logic tier (processing of information) often connects to the data tier (database). Connecting to the database, of course, requires authentication. The authentication credentials in the business logic tier must be stored in a centralized location that is locked down. The same applies to accessing APIs providing services to support your application. Scattering credentials throughout the source code is not acceptable. Some development frameworks provide a centralized secure location for storing credentials to the backend database. Secret management solutions that are cloud based or on-premise can be used to allow the application to acquire the credential at application launch or when needed, therefore securing the credentials and avoid storing them statically on disk within a server or a container image. CWE-257 7 If an application becomes compromised it is important that the application itself and any middleware services be configured to run with minimal privileges. For instance, while the application layer or business layer needs the ability to read and write data to the underlying database, administrative credentials that grant access to other databases or tables should not be provided. CWE-250 <p>...</p>"},{"location":"Checklist/Business%20Logic/","title":"Business Logic","text":"<p>...</p> # Security Requirement CWE 1 Verify the application will only process business logic flows for the same user in sequential step order and without skipping steps. CWE-841 2 Verify the application will only process business logic flows with all steps being processed in realistic human time, i.e. transactions are not submitted too quickly. CWE-799 3 Verify the application has appropriate limits for specific business actions or transactions which are correctly enforced on a per user basis. CWE-770 4 Verify the application has sufficient anti-automation controls to detect and protect against data exfiltration, excessive business logic requests, excessive file uploads or denial of service attacks. CWE-770 5 Verify the application has business logic limits or validation to protect against likely business risks or threats, identified using threat modeling or similar methodologies. CWE-841 6 Verify the application does not suffer from \"Time Of Check to Time Of Use\" (TOCTOU) issues or other race conditions for sensitive operations. CWE-367 7 Verify the application monitors for unusual events or activity from a business logic perspective. For example, attempts to perform actions out of order or actions which a normal user would never attempt. CWE-754 8 Verify the application has configurable alerting when automated attacks or unusual activity is detected. CWE-390 <p>...</p>"},{"location":"Checklist/Communication%20Security/","title":"Communication Security","text":"<p>...</p> # Security Requirement CWE 1 Verify that secured TLS is used for all client connectivity, and does not fall back to insecure or unencrypted protocols. CWE-319 2 Verify using online or up to date TLS testing tools that only strong algorithms, ciphers, and protocols are enabled, with the strongest algorithms and ciphers set as preferred. CWE-326 3 Verify that old versions of SSL and TLS protocols, algorithms, ciphers, and configuration are disabled, such as SSLv2, SSLv3, or TLS 1.0 and TLS 1.1. The latest version of TLS should be the preferred cipher suite. CWE-326 4 Verify that connections to and from the server use trusted TLS certificates. Where internally generated or self-signed certificates are used, the server must be configured to only trust specific internal CAs and specific self-signed certificates. All others should be rejected. CWE-295 5 Verify that encrypted communications such as TLS is used for all inbound and outbound connections, including for management ports, monitoring, authentication, API, or web service calls, database, cloud, serverless, mainframe, external, and partner connections. The server must not fall back to insecure or unencrypted protocols. CWE-319 6 Verify that all encrypted connections to external systems that involve sensitive information or functions are authenticated. CWE-287 7 Verify that proper certification revocation, such as Online Certificate Status Protocol (OCSP) Stapling, is enabled and configured. CWE-299 8 Verify that backend TLS connection failures are logged. CWE-544 <p>...</p>"},{"location":"Checklist/Configuration%20and%20Operations/","title":"Configurations and Operations","text":"<p>...</p> # Security Requirement CWE 1 Automating the deployment of your application, using Continuous Integration and Continuous Deployment, helps to ensure that changes are made in a consistent, repeatable manner in all environments. . 2 A rigorous change management process must be maintained during change management operations. For example, new releases should only be deployed after process. CWE-439 3 Engage the business owner to define security requirements for the application. This includes items that range from the whitelist validation rules all the way to nonfunctional requirements like the performance of the login function. Defining these requirements up front ensures that security is baked into the system. . 4 Integrating security into the design phase saves money and time. Conduct a risk review with security professionals and threat model the application to identify key risks. The helps you integrate appropriate countermeasures into the design and architecture of the application. CWE-701,CWE-656 5 Security focused code reviews can be one of the most effective ways to find security bugs. Regularly review your code looking for common issues like SQL Injection and Cross-Site Scripting. CWE-702 6 Conduct security testing both during and after development to ensure the application meets security standards. Testing should also be conducted after major releases to ensure vulnerabilities did not get introduced during the update process. . 7 All components of infrastructure that support the application should be configured according to security best practices and hardening guidelines. In a typical web application this can include routers, firewalls, network switches, operating systems, web servers, application servers, databases, and application frameworks. CWE-15, CWE-656 8 An incident handling plan should be drafted and tested on a regular basis. The contact list of people to involve in a security incident related to the application should be well defined and kept up to date. . 9 Training helps define a common language that the team can use to improve the security of the application. Education should not be confined solely to software developers, testers, and architects. Anyone associated with the development process, such as business analysts and project managers, should all have periodic software security awareness training. . <p>...</p>"},{"location":"Checklist/Cryptography/","title":"Cryptography","text":"<p>...</p> # Security Requirement CWE 1 Verify that regulated private data is stored encrypted while at rest, such as Personally Identifiable Information (PII), sensitive personal information, or data assessed likely to be subject to EU's GDPR. CWE-311 2 Verify that regulated health data is stored encrypted while at rest, such as medical records, medical device details, or de-anonymized research records. CWE-311 3 Verify that regulated financial data is stored encrypted while at rest, such as financial accounts, defaults or credit history, tax records, pay history, beneficiaries, or de-anonymized market or research records. CWE-311 4 Verify that all cryptographic modules fail securely, and errors are handled in a way that does not enable Padding Oracle attacks. CWE-310 5 Verify that industry proven or government approved cryptographic algorithms, modes, and libraries are used, instead of custom coded cryptography. CWE-327 6 Verify that encryption initialization vector, cipher configuration, and block modes are configured securely using the latest advice. CWE-326 7 Verify that random number, encryption or hashing algorithms, key lengths, rounds, ciphers or modes, can be reconfigured, upgraded, or swapped at any time, to protect against cryptographic breaks. CWE-326 8 Verify that known insecure block modes (i.e. ECB, etc.), padding modes (i.e. PKCS#1 v1.5, etc.), ciphers with small block sizes (i.e. Triple-DES, Blowfish, etc.), and weak hashing algorithms (i.e. MD5, SHA1, etc.) are not used unless required for backwards compatibility. CWE-326 9 Verify that nonces, initialization vectors, and other single use numbers must not be used more than once with a given encryption key. The method of generation must be appropriate for the algorithm being used. CWE-326 10 Verify that encrypted data is authenticated via signatures, authenticated cipher modes, or HMAC to ensure that ciphertext is not altered by an unauthorized party. CWE-326 11 Verify that all cryptographic operations are constant-time, with no 'short-circuit' operations in comparisons, calculations, or returns, to avoid leaking information. CWE-385 12 Verify that all random numbers, random file names, random GUIDs, and random strings are generated using the cryptographic module's approved cryptographically secure random number generator when these random values are intended to be not guessable by an attacker. CWE-338 13 Verify that random GUIDs are created using the GUID v4 algorithm, and a Cryptographically-secure Pseudo-random Number Generator (CSPRNG). GUIDs created using other pseudo-random number generators may be predictable. CWE-338 14 Verify that random numbers are created with proper entropy even when the application is under heavy load, or that the application degrades gracefully in such circumstances. CWE-338 15 Verify that a secrets management solution such as a key vault is used to securely create, store, control access to and destroy secrets CWE-798 16 Verify that key material is not exposed to the application but instead uses an isolated security module like a vault for cryptographic operations. CWE-320 <p>...</p>"},{"location":"Checklist/Data%20Protection/","title":"Data Protection","text":"<p>...</p> # Security Requirement CWE 1 HTTPS should be used for your entire application. If you have to limit where it's used, then HTTPS must be applied to any authentication pages as well as to all pages after the user is authenticated. If sensitive information (e.g. personal information) can be submitted before authentication, those features must also be sent over. CWE-311,CWE-319,CWE-523 2 For all pages requiring protection by HTTPS, the same URL should not be accessible via the insecure HTTP channel. CWE-319 3 The Strict-Transport-Security header ensures that the browser does not talk to the server over HTTP. This helps reduce the risk of HTTP downgrade attacks as implemented by the sslsniff tool. . 4 User passwords must be stored using secure hashing techniques with strong algorithms like PBKDF2, bcrypt, or SHA-512. Simply hashing the password a single time does not sufficiently protect the password. Use adaptive hashing (a work factor), combined with a randomly generated salt for each user to make the hash strong. CWE-257 5 If encryption keys are exchanged or pre-set in your application then any key establishment or exchange must be performed over a secure channel . 6 When keys are stored in your system they must be properly secured and only accessible to the appropriate staff on a need to know basis. Example: AWS Key Management Service (KMS), Azure Key Vault, AWS CloudHSM CWE-320 7 Weak ciphers must be disabled on all servers. For example, SSL v2, SSL v3, and TLS protocols prior to 1.2 have known weaknesses and are not considered secure. Additionally, disable the NULL, RC4, DES, and MD5 cipher suites. Ensure all key lengths are greater than 128 bits, use secure renegotiation, and disable compression. . 8 HTTPS certificates should be signed by a reputable certificate authority. The name on the certificate should match the FQDN of the website. The certificate itself should be valid and not expired. . 9 Browser data caching should be disabled using the cache control HTTP headers or meta tags within the HTML page. Additionally, sensitive input fields, such as the login form, should have the autocomplete=off setting in the HTML form to instruct the browser not to cache the credentials. CWE-524 10 Conduct an evaluation to ensure that sensitive data is not being unnecessarily transported or stored. Where possible, use tokenization to reduce data exposure risks. . <p>...</p>"},{"location":"Checklist/Error%20Handling%20and%20Logging/","title":"Error Handling and Logging","text":"<p>...</p> # Security Requirement CWE 1 Error messages should not reveal details about the internal state of the application. For example, file system path and stack information should not be exposed to the user through error messages. CWE-209 2 Given the languages and frameworks in use for web application development, never allow an unhandled exception to occur. Error handlers should be configured to handle unexpected errors and gracefully return controlled output to the user. CWE-391 3 Your development framework or platform may generate default error messages. These should be suppressed or replaced with customized error messages as framework generated messages may reveal sensitive information to the user. CWE-209 4 Any authentication activities, whether successful or not, should be logged. CWE-778 5 Any activities or occasions where the user's privilege level changes should be logged. CWE-778 6 Any administrative activities on the application or any of its components should be logged. CWE-778 7 Any access to sensitive data should be logged. This is particularly important for corporations that have to meet regulatory requirements like HIPAA, PCI, or SOX. CWE-778 8 While logging errors and auditing access is important, sensitive data should never be logged in an unencrypted form. For example, under HIPAA and PCI, it would be a violation to log sensitive data into the log itself unless the log is encrypted on the disk. Additionally, it can create a serious exposure point should the web application itself become compromised. CWE-532 9 Logs should be stored and maintained appropriately to avoid information loss or tampering by intruder. Log retention should also follow the retention policy set forth by the organization to meet regulatory requirements and provide enough information for forensic and incident response activities. CWE-533 <p>...</p>"},{"location":"Checklist/Files%20and%20Resources/","title":"Files and Resources","text":"<p>...</p> # Security Requirement CWE 1 Verify that the application will not accept large files that could fill up storage or cause a denial of service. CWE-400 2 Verify that compressed files are checked for \"zip bombs\" - small input files that will decompress into huge files thus exhausting file storage limits. CWE-409 3 Verify that a file size quota and maximum number of files per user is enforced to ensure that a single user cannot fill up the storage with too many files, or excessively large files. CWE-770 4 Verify that files obtained from untrusted sources are validated to be of expected type based on the file's content. CWE-434 5 Verify that user-submitted filename metadata is not used directly by system or framework filesystems and that a URL API is used to protect against path traversal. CWE-22 6 Verify that user-submitted filename metadata is validated or ignored to prevent the disclosure, creation, updating or removal of local files (LFI). CWE-73 7 Verify that user-submitted filename metadata is validated or ignored to prevent the disclosure or execution of remote files via Remote File Inclusion (RFI) or Server-side Request Forgery (SSRF) attacks. CWE-98 8 Verify that the application protects against Reflective File Download (RFD) by validating or ignoring user-submitted filenames in a JSON, JSONP, or URL parameter, the response Content-Type header should be set to text/plain, and the Content-Disposition header should have a fixed filename. CWE-641 9 Verify that untrusted file metadata is not used directly with system API or libraries, to protect against OS command injection. CWE-78 10 Verify that the application does not include and execute functionality from untrusted sources, such as unverified content distribution networks, JavaScript libraries, node npm libraries, or server-side DLLs. CWE-829 11 Verify that files obtained from untrusted sources are stored outside the web root, with limited permissions, preferably with strong validation. CWE-922 12 Verify that files obtained from untrusted sources are scanned by antivirus scanners to prevent upload of known malicious content. CWE-509 13 Verify that the web tier is configured to serve only files with specific file extensions to prevent unintentional information and source code leakage. For example, backup files (e.g. .bak), temporary working files (e.g. .swp), compressed files (.zip, .tar.gz, etc) and other extensions commonly used by editors should be blocked unless required. CWE-552 14 Verify that direct requests to uploaded files will never be executed as HTML/JavaScript content. CWE-434 15 Verify that the web or application server is configured with an allow list of resources or systems to which the server can send requests or load data/files from. CWE-918 <p>...</p>"},{"location":"Checklist/Input%20and%20Output%20Validation/","title":"Input and Output Validation","text":"<p>...</p> # Security Requirement CWE 1 All output functions must contextually encode data before sending it to the user. Depending on where the output will end up in the HTML page, the output must be encoded differently. For example, data placed in the URL context must be encoded differently than data placed in JavaScript context within the HTML page. CWE-79 2 For each user input field, there should be validation on the input content. Allowlisting input is the preferred approach. Only accept data that meets a certain criteria. For input that needs more flexibility, blocklisting can also be applied where known bad input patterns or characters are blocked. CWE-159,CWE-144 3 SQL queries should be crafted with user content passed into a bind variable. Queries written this way are safe against SQL injection attacks. SQL queries should not be created dynamically using string concatenation. Similarly, the SQL query string used in a bound or parameterized query should never be dynamically built from user input. CWE-89,CWE-564 4 In order to prevent Cross-Site Request Forgery attacks, you must embed a random value that is not known to third parties into the HTML form. This CSRF protection token must be unique to each request. This prevents a forged CSRF request from being submitted because the attacker does not know the value of the token. CWE-352 5 For every page in your application set the encoding using HTTP headers or meta tags within HTML. This ensures that the encoding of the page is always defined and that browser will not have to determine the encoding on its own. Setting a consistent encoding, like UTF-8, for your application reduces the overall risk of issues like Cross-Site Scripting. CWE-172 6 When accepting file uploads from the user make sure to validate the size of the file, the file type, and the file contents as well as ensuring that it is not possible to override the destination path for the file. CWE-434,CWE-616,CWE-22 7 When hosting user uploaded content which can be viewed by other users, use the X-Content-Type-Options: nosniff header so that browsers do not try to guess the data type. Sometimes the browser can be tricked into displaying the data type incorrectly (e.g. showing a GIF file as HTML). Always let the server or application determine the data type. CWE-430 8 The source of the input must be validated. For example, if input is expected from a POST request do not accept the input variable from a GET request. CWE-20,CWE-346 9 Use the X-Frame-Options header to prevent content from being loaded by a foreign site in a frame. This mitigates Clickjacking attacks. For older browsers that do not support this header add framebusting Javascript code to mitigate Clickjacking (although this method is not foolproof and can be circumvented). CWE-693 10 The Content Security Policy (CSP), X-XSS-Protection, X-Content-Type-Options headers help defend against Cross-Site Scripting(XSS) attack. In specific, CSP should be customized for the application to lock down the source and location of content plus adding logging to provide some attack detection capability on the front end. CWE-79,CWE-692 11 When handling serialized data from untrusted source (or passing through untrusted paths), proper controls have to be in place to prevent attacker from abusing the automatic data structure rebuilding capability within the programming language. Each programming platform has its own mitigation strategy which range from using alternative data interchange format such as JSON to restricting the types of objects that can be deserialized. Refer to OWASP Deserialization Cheat Sheet for some great defense information. CWE-502 <p>...</p>"},{"location":"Checklist/Malicious%20Code/","title":"Malicious Code","text":"<p>...</p> # Security Requirement CWE 1 Verify that a code analysis tool is in use that can detect potentially malicious code, such as time functions, unsafe file operations and network connections. CWE-749 2 Verify that the application source code and third party libraries do not contain unauthorized phone home or data collection capabilities. Where such functionality exists, obtain the user's permission for it to operate  before collecting any data. CWE-359 3 Verify that the application does not ask for unnecessary or excessive permissions to privacy related features or sensors, such as contacts, cameras, microphones, or location. CWE-272 4 Verify that the application source code and third party libraries do not contain back doors, such as hard-coded or additional undocumented accounts or keys, code obfuscation, undocumented binary blobs, rootkits, or anti-debugging, insecure debugging features, or otherwise out of date, insecure, or hidden functionality that could be used maliciously if discovered. CWE-507 5 Verify that the application source code and third party libraries do not contain time bombs by searching for date and time related functions. CWE-511 6 Verify that the application source code and third party libraries do not contain malicious code, such as salami attacks, logic bypasses, or logic bombs. CWE-511 7 Verify that the application source code and third party libraries do not contain Easter eggs or any other potentially unwanted functionality. CWE-507 8 Verify that if the application has a client or server auto-update feature, updates should be obtained over secure channels and digitally signed. The update code must validate the digital signature of the update before installing or executing the update. CWE-16 9 Verify that the application employs integrity protections, such as code signing or subresource integrity. The application must not load or execute code from untrusted sources, such as loading includes, modules, plugins, code, or libraries from untrusted sources or the Internet. CWE-353 10 Verify that the application has protection from subdomain takeovers if the application relies upon DNS entries or DNS subdomains, such as expired domain names, out of date DNS pointers or CNAMEs, expired projects at public source code repos, or transient cloud APIs, serverless functions, or storage buckets (autogen-bucket-id.cloud.example.com) or similar. Protections can include ensuring that DNS names used by applications are regularly checked for expiry or change. CWE-350 <p>...</p>"},{"location":"Checklist/Session%20Management/","title":"Session Management","text":"<p>...</p> Session Management . ..1 # Security Requirement CWE 1 Session tokens must be generated by secure random functions and must be of a sufficient length so as to withstand analysis and prediction. CWE-6 2 Session tokens should be regenerated when the user authenticates to the application and when the user privilege level changes. Additionally, should the encryption status change, the session token should always be regenerated. CWE-384 3 When a user is not active, the application should automatically log the user out. Be aware that Ajax applications may make recurring calls to the application effectively resetting the timeout counter automatically. CWE-613 4 Users should be logged out after an extensive amount of time (e.g. 4-8 hours) has passed since they logged in. This helps mitigate the risk of an attacker using a hijacked session. CWE-613 5 Unless the application requires multiple simultaneous sessions for a single user, implement features to detect session cloning attempts. Should any sign of session cloning be detected, the session should be destroyed, forcing the real user to re-authenticate. . 6 When the user logs out of the application the session and corresponding data on the server must be destroyed. This ensures that the session can not be accidentally revived. CWE-613 7 The logout button or logout link should be easily accessible to the user on every page after they have authenticated. . 8 The session cookie should be set with both the HttpOnly and the Secure flags. This ensures that the session id will not be accessible to client-side scripts and it will only be transmitted over HTTPS, respectively. In addition, the SameSite attribute should be set to with either lax or straight mode to reduce the risk of Cross Site Request Forgery. CWE-79, CWE-614,CWE-1004 9 The cookie domain and path scope should be set to the most restrictive settings for your application. Any wildcard domain scoped cookie must have a good justification for its existence. . 10 The session cookie should have a reasonable expiration time. Non-expiring session cookies should be avoided. . <p>...</p>"},{"location":"Checklist/Web%20Service/","title":"Web Service","text":"<p>...</p> # Security Requirement CWE 1 Verify that all application components use the same encodings and parsers to avoid parsing attacks that exploit different URI or file parsing behavior that could be used in SSRF and RFI attacks. CWE-116 2 Verify that access to administration and management functions is limited to authorized administrators. CWE-419 3 Verify API URLs do not expose sensitive information, such as the API key, session tokens etc. CWE-598 4 Verify that authorization decisions are made at both the URI, enforced by programmatic or declarative security at the controller or router, and at the resource level, enforced by model-based permissions. CWE-285 5 Verify that requests containing unexpected or missing content types are rejected with appropriate headers (HTTP response status 406 Unacceptable or 415 Unsupported Media Type). CWE-434 6 Verify that enabled RESTful HTTP methods are a valid choice for the user or action, such as preventing normal users using DELETE or PUT on protected API or resources. CWE-650 7 Verify that JSON schema validation is in place and verified before accepting input. CWE-20 8 Verify that RESTful web services that utilize cookies are protected from Cross-Site Request Forgery via the use of at least one or more of the following: double submit cookie pattern, CSRF nonces, or Origin request header checks. CWE-352 9 Verify that REST services have anti-automation controls to protect against excessive calls, especially if the API is unauthenticated. CWE-770 10 Verify that REST services explicitly check the incoming Content-Type to be the expected one, such as application/xml or application/json. CWE-436 11 Verify that the message headers and payload are trustworthy and not modified in transit. Requiring strong encryption for transport (TLS only) may be sufficient in many cases as it provides both confidentiality and integrity protection. Per-message digital signatures can provide additional assurance on top of the transport protections for high-security applications but bring with them additional complexity and risks to weigh against the benefits. CWE-345 12 Verify that XSD schema validation takes place to ensure a properly formed XML document, followed by validation of each input field before any processing of that data takes place. CWE-20 13 Verify that the message payload is signed using WS-Security to ensure reliable transport between client and service. CWE-345 14 Verify that a query allow list or a combination of depth limiting and amount limiting is used to prevent GraphQL or data layer expression Denial of Service (DoS) as a result of expensive, nested queries. For more advanced scenarios, query cost analysis should be used. CWE-770 15 Verify that GraphQL or other data layer authorization logic should be implemented at the business logic layer instead of the GraphQL layer. CWE-285 <p>...</p>"},{"location":"Contact/Contact/","title":"Contact Application Security Team","text":"<p>Drop an email to dl-infosec-cloud-devops-security@marks-and-spencer.com</p>"},{"location":"SSDLC/SSDLC/","title":"Secure SDLC","text":""},{"location":"SSDLC/SSDLC/#devsecops","title":"DevSecOps","text":"<ul> <li>Automation of Security controls into a continuous testing process</li> <li>Mature DevSecOps benefits from faster, more reliable Security Delivery with up to 40% less Security Vulnerabilities</li> <li>Shift Left - secure applications from all phases, emphasis on getting it right at the start</li> <li>DevSecOps Platform allows for a consistent framework of identifying and gaining visibility/measurements to/of risk across the portfolio</li> </ul>"},{"location":"Tools/AccessToTools/","title":"Access To Security tools Snyk and FOD","text":"<p>Process of getting access to security tools FOD and Snyk.</p> <p>Steps:</p> <ol> <li>Application team members to raise a request on AIG platform for being added to AAD group at https://myaccess.microsoft.com/#/access-packages.</li> </ol> <p>Note: This link to be accessed from browser where M&amp;S cred are authenticated as it is SSO login</p> <ol> <li> <p>Post SSO navigate to Access packages and search for Snyk in search bar</p> </li> <li> <p>While requesting access kindly provide the name of the application for which you have requested access.</p> </li> <li> <p>Once the AD group access is requested the approver shall approve the same and requester will be notified for the same</p> </li> <li> <p>Post approval requestor must perform SSO on below links and inform the appsec team on</p> <pre><code>DL -  DL-AppSecTeam@marks-and-spencer.com about the same who will provide them assign the applications.\n</code></pre> </li> </ol> <p>##SSO URLs of the tools</p> <pre><code>   Fortify URL https://emea.fortify.com/SSO/Login/c4802e88-116f-4e4f-825d-db080ddbadde\n\n   Synk url :https://app.snyk.io/login/sso\n</code></pre> <p>Note : Performing SSO from the above links in the browser where M&amp;S cred are authenticated is mandatory for getting access to the required applications</p>"},{"location":"Tools/FOD/","title":"Fortify On Demand(FOD)","text":"<p>At M&amp;S FOD is being used for Static Application Security Testing (SAST) and Dynamic Application Security Testing (DAST). FOD delivers application security as a service, providing customers with the security testing, vulnerability management, expertise, and support needed to easily create, supplement, and expand a Software Security Assurance program.</p>"},{"location":"Tools/FOD/#integration-steps","title":"Integration steps:","text":""},{"location":"Tools/FOD/#azure-devops","title":"Azure Devops:","text":"<p>Step 1: Store GitHub Username, Personal Access Token  and API_KEY and API_SECRET in Azure Keyvault.</p> <p>Step 2: Create a Pipeline.yml with following code</p> <pre><code># Starter pipeline\n\u200b\n# Start with a minimal pipeline that you can customize to build and deploy your code.\n# Add steps that build, run tests, deploy, and more:\n# https://aka.ms/yaml\n\u200b\ntrigger: none\n\u200b\njobs:\n- job: FOD_Scanning\n  pool:\n    name: poc-2-test\n  steps:\n\u200b\n\u200b\n  - task: Bash@3\n    inputs:\n      targetType: 'inline'\n      script: |\n        wget -c https://github.com/fod-dev/fod-uploader-java/releases/download/v5.4.0/FodUpload.jar\n        pwd\n        ls -lrt\n\n  - task: Bash@3\n    inputs:\n      targetType: 'inline'\n      script: |\n        apt install zip\n        zip -r 'WebGoat-develop.zip' .\n\n  - task: AzureKeyVault@1\n    inputs:\n      azureSubscription: 'AzureResourceManager'\n      KeyVaultName: 'cicd-v2-shared-kv'\n      SecretsFilter: '*'\n      RunAsPreJob: false\n  - task: Bash@3\n    inputs:\n      targetType: 'inline'\n      script: |\n        java -jar FodUpload.jar -ac $(FOD-API-KEY) $(FOD-API-SECRET) -rid $(RELEASE-ID) -purl $(FOD-PORTAL-URL) -apiurl $(FOD-API-URL) -z WebGoat-develop.zip -ep 2 -rp 0 -pp 1 -apf -I 1\n    displayName: 'FOD SAST Scan'\n\n  - task: Bash@3\n    inputs:\n      targetType: 'inline'\n      script: |\n             auth=$(curl -X POST --header 'Content-Type: application/x-www-form-urlencoded' --header 'Connection: close' -d 'grant_type=client_credentials&amp;scope=api-tenant&amp;client_id=$(FOD-API-KEY)&amp;client_secret=$(FOD-API-SECRET)' 'https://api.emea.fortify.com/oauth/token')\n             tok3n=$( echo \"$auth\" | jq '.[\"access_token\"]' )\n             tok3n=\"${tok3n:1:-1}\"\n             releasedetails=$(curl -X GET --header 'Accept: application/json' --header 'Authorization: Bearer '${tok3n} 'https://api.emea.fortify.com/api/v3/releases/'$(RELEASE-ID))\n             scanid=$( echo \"$releasedetails\" | jq .currentStaticScanId )\n             applicationname=$( echo \"$releasedetails\" | jq .applicationName | sed 's/[\"]//g')\n             scanSummary=$(curl -X GET --header 'Accept: application/json' --header 'Authorization: Bearer '${tok3n} 'https://api.emea.fortify.com/api/v3/scans/'${scanid}'/summary')\n             CRITICAL=$( echo \"$releasedetails\" | jq .staticCritical )\n             HIGH=$( echo \"$releasedetails\" | jq .staticHigh )\n             if [ $CRITICAL -gt 0 ]\n             then\n               echo \"##[error]Application has critical Issues\"\n               curl -H 'Content-Type: application/json' -d '{\"text\": \"Pipeline had warnings because critical issues in FoD SAST are present for '$applicationname'\"}' $(teams_webhook)\n               #exit 1\n             elif [ $HIGH -gt 0 ]\n             then\n               echo \"##[error]Application has High Issues\"\n               curl -H 'Content-Type: application/json' -d '{\"text\": \"Pipeline had warnings because high issues in FoD SAST are present for '$applicationname'\"}' $(teams_webhook)\n               #exit 1\n             else\n               echo \"PASSED\"\n             fi\n    continueOnError: true           \n    displayName: 'FOD Security Gating'\n</code></pre> <p>FOD-PORTAL-URL - https://emea.fortify.com/</p> <p>FOD-API-URL   -   https://api.emea.fortify.com/</p> <pre><code>Note: To enforce security gating in block mode please uncomment exit code 1.\n</code></pre> <p>Sample Output:-</p> <p>1) After the scanning is completed, if the code has Critical or High security vulnerabilities, the job status will give an alert because of Security Gating Implementation. Please refer the below screenshot</p> <p>IMAGE</p> <p>To Resolve or Validate security vulnerabilities:-</p> <p>To validate or Resolve any security vulnerabilities after scanning the code in any CI/CD pipeline. Open that Application in Fortify on demand portal and check the last build run details. It will explain about each vulnerabilities clearly.</p>"},{"location":"Tools/FOD/#github-actions","title":"Github Actions","text":"<pre><code>Fortify:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: DigitalInnovation/cloud-devsecops-pipelineactions/workflows/appsec/fortify@v1.1.1\n        with:\n          sast_release_id: ${{secrets.FOD_RELEASE_ID}}\n          sast_api_key: ${{ secrets.FOD_API_KEY}}\n          sast_api_secret: ${{ secrets.FOD_API_SECRET}}\n\n      - name: FOD Security Gating\n        run: |\n          auth=$(curl -X POST --header 'Content-Type: application/x-www-form-urlencoded' --header 'Connection: close' -d 'grant_type=client_credentials&amp;scope=api-tenant&amp;client_id=${{secrets.FOD_API_KEY}}&amp;client_secret=${{secrets.FOD_API_SECRET}}' 'https://api.emea.fortify.com/oauth/token')\n          tok3n=$( echo \"$auth\" | jq '.[\"access_token\"]' )\n          tok3n=\"${tok3n:1:-1}\"\n          releasedetails=$(curl -X GET --header 'Accept: application/json' --header 'Authorization: Bearer '${tok3n} 'https://api.emea.fortify.com/api/v3/releases/'${{secrets.FOD_RELEASE_ID}})\n          scanid=$( echo \"$releasedetails\" | jq .currentStaticScanId )\n          applicationname=$( echo \"$releasedetails\" | jq .applicationName | sed 's/[\"]//g')\n          scanSummary=$(curl -X GET --header 'Accept: application/json' --header 'Authorization: Bearer '${tok3n} 'https://api.emea.fortify.com/api/v3/scans/'${scanid}'/summary')\n          CRITICAL=$( echo \"$releasedetails\" | jq .staticCritical )\n          HIGH=$( echo \"$releasedetails\" | jq .staticHigh )\n          if [ $CRITICAL -gt 0 ]\n          then\n            echo \"##[error]Application has critical Issues\"          \n            curl -H 'Content-Type: application/json' -d '{\"text\": \"Application has critical Issues in FOD\"}' ${{secrets.TEAMS_WEBHOOK}}          \n            #exit 1\n          elif [ $HIGH -gt 0 ]\n          then\n            echo \"##[error]Application has High Issues\"\n            curl -H 'Content-Type: application/json' -d '{\"text\": \"Application has high Issues in FOD\"}' ${{secrets.TEAMS_WEBHOOK}}\n            #exit 1\n          else\n            echo \"PASSED\"\n          fi\n        continue-on-error: true\n</code></pre> <p>Note: To enforce security gating in block mode please uncomment exit code 1.</p>"},{"location":"Tools/FOD/#jenkins","title":"Jenkins","text":"<p>Step 1:  Store GitHub username and personal access token in Jenkins credentials.\u200b\u200b\u200b\u200b\u200b\u200b\u200b</p> <p>Step 2:  Store API key, API secret in key vault credentials.</p> <p>Step 3: create a Jenkins pipeline and use the following code.</p> <pre><code>pipeline {\n    agent any\n\n    stages {\n\n        stage('Git Checkout'){\n            steps {\n                checkout([$class: 'GitSCM', branches: [[name: '&lt;Github_branchname&gt;']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '&lt;Github_credentials&gt;', url: '&lt;Github_URL&gt;']]])\n                }\n            }\n\n        stage('ZIP directory to be uploaded or unzip something') {\n            agent {\n                docker {\n                    image 'javieraviles/zip'\n                    reuseNode true\n                }\n            }\n            steps {\n                echo \"Creating zip file...\"\n\n                sh \"zip -r 'WebGoat-develop.zip' '&lt;Jenkins path where all the github files were downloaded&gt;'\"\n            }\n            }\n        stage('Downloading the FOD jar file from Github'){\n            steps{\n                sh 'wget -c https://github.com/fod-dev/fod-uploader-java/releases/download/v5.4.0/FodUpload.jar'\n                }\n                }\n        stage('Retrieve keyvault credentials and Upload the ZIP file to FOD using jar'){\n\n            options{\n\n                azureKeyVault(\n\n                    credentialID: '&lt;Servicepriciple_credentials&gt;',\n\u200b\n                    keyVaultURL: '&lt;Keyvault_url&gt;',\n\n                    secrets: [\n\n                        [envVariable: 'API_KEY_FOD', name: 'FOD-API-KEY-Test', secretType: 'Secret'],\n                        [envVariable: 'API_SECRET_FOD', name: 'FOD-API-SECRET-Test', secretType: 'Secret']\n\n                        ]\n                        )\n                        }\n                            steps{\n                                sh 'java -version'\n\n                                sh 'java -jar FodUpload.jar -ac $API_KEY_FOD $API_SECRET_FOD -rid 6560 -purl https://emea.fortify.com/ -apiurl                                       https://api.emea.fortify.com/ -z WebGoat-develop.zip -ep 2 -rp 0 -pp 1 -apf -I 1'\n\n                                }\n                                }\n\n\n\n\n                }\n            }\n</code></pre> <p>To understand what parameters, we need to use to run API from CI/CD tools. Please refer this link</p> <p>Note:</p> <p>1) If we are Scanning any code with \"FOD Plugin\", once the scan found any security vulnerabilities in code then it will automatically fail the CI/CD pipeline.</p> <p>2) As we are using FodUpload jar file to Scan the code instead of FOD plugin. There is no such process to fail the pipeline automatically once the scan found any security vulnerabilities in code.</p> <p>3) we need to use the custom code to fail the pipelines while using FodUpload jar to scan the code. Include lines from \"55 to 63\" to fail the CI/CD pipeline.</p> <p>4) $? is a special variable in shell that reads the exit status of the last command executed.</p> <p>Sample output:</p> <p>1) After the scanning is completed, if the code has security vulnerabilities. The job status will fail because of security vulnerabilities Please refer the below screenshot</p> <p>IMAGE</p>"},{"location":"Tools/FOD/#concourse-ci","title":"Concourse CI:","text":"<p>Step 1: Store GitHub Username, Personal Access Token  and API_KEY and API_SECRET in Hashicorp Vault.</p> <p>Step 2: Create a Pipeline.yml with following code</p> <pre><code>resources:\n  - name: source-code\n    type: git\n    source:\n      uri: &lt;Github_Url&gt;\n      branch: &lt;branch_name&gt;\n      username: ((Github.username))\n      password: ((Github.personal_access_token))\n\njobs:\n  - name: source-code\n    public: false\n    plan:\n      - get: source-code\n        trigger: true\n      - task: test-using-FOD-SAST\n        config:\n          platform: linux\n          image_resource:\n            type: registry-image\n            source: { repository: ubuntu, tag: \"latest\" }\n          params:\n            FOD_API_KEY: ((API_CRED.FOD_API_KEY))\n            FOD_API_SECRET: ((API_CRED.FOD_API_SECRET))\n          inputs:\n            - name: source-code\n          run:\n            path: /bin/sh\n            args:\n              - -c\n              - |\n                apt-get update\n                echo \"--------install java------\"               \n                apt-get update &amp;&amp; DEBIAN_FRONTEND=\"noninteractive\" TZ=\"Asia/india\" apt-get install -y tzdata\n                apt-get -y install openjdk-11-jre               \n                echo \"-------install zip----\"\n                apt-get -y install zip\n                echo \"-----install wget------\"\n                apt-get -y install wget\n                echo \"java --version\"\n                cd source-code\n                zip -r uploadsourc.zip . -i /*.*\n                wget -c https://github.com/fod-dev/fod-uploader-java/releases/download/v5.4.0/FodUpload.jar\n                java -jar FodUpload.jar -ac ((API_CRED.FOD_API_KEY)) ((API_CRED.FOD_API_SECRET)) -rid 6560 -purl https://emea.fortify.com/ -                      apiurl https://api.emea.fortify.com/ -z uploadsourc.zip -ep 2 -rp 0 -pp 1 -apf -I 1\n</code></pre> <p>Note:</p> <p>Use the variable name 'API_CRED.FOD_API_KEY' to pass fortify on demand  API token in the pipeline. All the variable fields are configured in Hashicorp vault for reusability and manage the secrets ((Hashicorp vault variable)). GitHub and Fortify on demand details to be updated in the Hashicorp Vault. (Don't hard code username and password values in the pipeline) For steps to create a secret keys in HC Vault, refer here.</p> <p>Sample Output:-</p> <p>1) After the scanning is completed, if the code has security vulnerabilities. The job status will fail because of security vulnerabilities Please refer the below screenshot</p> <p>IMAGE</p>"},{"location":"Tools/FOD/#product-features","title":"Product Features","text":"<ul> <li>Fortify on Demand gives you the tools to create, supplement, and expand a Software Security Assurance program with no infrastructure investments or security staff required.</li> <li>Fortify on Demand is the only application security provider to offer static application security testing (SAST), dynamic application security testing (DAST), and mobile application testing (MAST) on demand so you can choose the solution that\u2019s right for your business.</li> <li>Fortify on Demand assessments include a review by  security experts. In combination with innovative Fortify Scan Analytics machine learning platform, it removes false positives and ensures overall quality so your development teams can maximize their remediation efforts early in the software lifecycle.</li> <li>Fortify on Demand gives developers the tools to write secure code and optimize application security at every step of the software development cycle.</li> <li>Fortify on Demand is a comprehensive platform designed with helpdesk ticketing available 24x7 through a dedicated support team.x-www-</li> </ul>"},{"location":"Tools/FOD/#architecture","title":"Architecture","text":"<p>IMAGE</p>"},{"location":"Tools/Snyk/","title":"Snyk","text":""},{"location":"Tools/Snyk/#overview","title":"Overview","text":"<p>Developers are adopting more and more open-source code, third-party code and libraries to achieve various tasks in application development process. This may introduce application security vulnerabilities if the latest and non vulnerable versions of the packages are not used. But determining whether the open-source code is vulnerable or not is a cumbersome job. Hence there is a need of Software Composition Analysis (SCA) tool like Snyk to uncover hidden vulnerabilities in the libraries used and their vulnerable direct / transitive dependencies.</p> <p>Snyk is a developer-first security solution that helps organizations to use open source and stay secure. Snyk is the only solution that seamlessly and proactively finds and fixes vulnerabilities and license violations in open source dependencies.</p>"},{"location":"Tools/Snyk/#how-to-onboard-an-application-and-get-access-for-snyk","title":"How to Onboard an application and get access for Snyk:","text":"<p>For Day 1 and Day 3 applications, please use Ecosystem builder for Cloud Native or V2 applications to get onboarded in the Snyk. You can also reach out to our DL: DL-AppSecTeam@marks-and-spencer.com if you face any issues during onboarding. or Raise an AIG (https://myaccess.microsoft.com/#/access-packages) request (search for [Snyk_FOD_ReadOnly])to get added into Snyk production Azure AD [IT APP AZ Cyber FOD Prod Application Dev]</p> <p>For Day 7 and Month 1 applications, please send a mail to DL-AppSecTeam@marks-and-spencer.com with below details to request access. \u200b\u200b\u200b\u200b\u200b\u200b\u200bPortfolio name Product name Y account name</p>"},{"location":"Tools/Snyk/#how-to-generate-api-token-to-access-the-snyk-cli","title":"How to generate API token to access the Snyk CLI \u200b\u200b\u200b\u200b\u200b\u200b?","text":"<p>Once access is granted to Y account follow the below steps to generate API token. Logon to Snyk UI, using (SSO Login). Go to Organization Settings &gt; Service Accounts &gt; Create a new service account(provide a name) &gt; Provide Role as Org Admin.</p>"},{"location":"Tools/Snyk/#steps-to-be-followed-for-performing-snyk-cli-scan","title":"Steps to be followed for performing Snyk  CLI scan:","text":"<p>Step 1: Download the Snyk CLI executable (Latest Version) Step 2: Authorize Snyk CLI with Service Account Token.\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b                    snyk auth  <p>Step 3: Run snyk test to check for vulnerabilities and fail the build if any are found\u200b\u200b\u200b\u200b\u200b\u200b\u200b                    snyk test --all-projects </p> <pre><code>         Note: For gradle projects use --all-projects for monorepos or use --all-sub-projects for \"multi-project\" configurations and test all sub-projects\n</code></pre> <p>Step 4: Capture the dependency tree for ongoing monitoring in Snyk\u200b\u200b\u200b\u200b\u200b\u200b\u200b                    snyk monitor --all-projects</p>"},{"location":"Tools/Snyk/#integration-steps","title":"Integration steps:","text":""},{"location":"Tools/Snyk/#azure-devops","title":"Azure Devops","text":"<p>Step 1: Store Service Account token in Azure KeyVault.</p> <p>Step 2: Create Azure Resource Manager Service Connection in your Azure Devops Project.</p> <p>Step 3: Use below task to get Personal API token from Azure KeyVault.</p> <pre><code>task: AzureKeyVault@1\n    inputs:\n      azureSubscription: '&lt;Service_Connection_Name&gt;'\n      KeyVaultName: '&lt;KeyVault_Name&gt;'\n      SecretsFilter: '&lt;keyName&gt;'\n      RunAsPreJob: true\n</code></pre> <p>Step 4: Use below task to run a snyk test and capture the dependency tree for ongoing monitoring in Snyk.</p> <p>Note: Get the Snyk CLI download URL from here based on your OS type.</p> <pre><code>task: Bash@3\n   displayName: \"Snyk_SCA_Scanning\"\n   inputs:\n     targetType: 'inline'\n     script: |\n       echo \"----------Download Latest Snyk CLI-----------\"\n       curl -Lo ./snyk \"https://github.com/snyk/snyk/releases/download/v1.1159.0/snyk-linux\"\n       chmod +x snyk\n       ls -lrt\n       echo \"----------Authenticating Snyk-----------\"\n       ./snyk auth $(snyk-token)\n       echo \"----------Snyk Monitor-----------\"\n       ./snyk monitor --all-projects\n       echo \"----------Snyk Scanning-----------\"\n       ./snyk test --all-projects\n     failOnStderr: true\ntask: Bash@3\n   displayName: \"Snyk Security Gating\"\n   inputs:\n     targetType: 'inline'\n     script: |    \n       snykCount=$(curl -X GET --header 'Content-Type: application/json' --header 'Authorization: token $(snyk-token)' 'https://api.snyk.io/api/v1/org/&lt;org id&gt;/project/&lt;project id&gt;')\n       CRITICAL=$(echo \"$snykCount\" | jq .issueCountsBySeverity.critical )\n       HIGH=$(echo \"$snykCount\" | jq .issueCountsBySeverity.high )\n       MEDIUM=$(echo \"$snykCount\" | jq .issueCountsBySeverity.medium )\n       LOW=$(echo \"$snykCount\" | jq .issueCountsBySeverity.low )\n       echo \"CRITICAL = $CRITICAL\"\n       echo \"HIGH = $HIGH\"\n       echo \"MEDIUM = $MEDIUM\"\n       echo \"LOW = $LOW\"\n       if [ $CRITICAL -gt 0 ]\n       then\n         curl -H 'Content-Type: application/json' -d '{\"text\": \"&lt;Application Name&gt; has Critical Issues in Snyk\"}' $(teams_webhook)          \n         echo \"##[error]Application has critical issues\"\n         #exit 1\n       elif [ $HIGH -gt 0 ]\n       then\n         curl -H 'Content-Type: application/json' -d '{\"text\": \"&lt;Application Name&gt; has High Issues in Snyk\"}' $(teams_webhook)          \n         echo \"##[error]Application has High issues\"\n         #exit 1\n       else\n         echo \"PASSED\"\n       fi\n</code></pre> <p>Sample screenshot of Snyk execution and results:</p> <p>IMAGE</p> <pre><code>Note: To enforce security gating in block mode please uncomment exit code 1.\n</code></pre>"},{"location":"Tools/Snyk/#github-actions","title":"GitHub Actions","text":"<p>Step 1: Create Service Account Token as GitHub Secrets in GitHub Settings &gt; Secrets &gt; Repository Secrets.</p> <p>Step 2: Use below pipeline to run a snyk test and capture the dependency tree for ongoing monitoring in Snyk.</p> <p>Note: Get the Snyk CLI download URL from here based on your runner machine OS type</p> <pre><code>name: Snyk_SCA_Scan\non: [push]\njobs:\n  Snyk_SCA_Scan:\n    needs: Code_checkout\n    runs-on: &lt;runner-machine&gt;   \n    steps:\n    - uses: actions/checkout@v1\n    - name: Snyk SCA Scanning\n      continue-on-error: true\n      run: |\n        echo \"----------Download Latest Snyk CLI-----------\"\n        curl -Lo ./snyk \"https://github.com/snyk/snyk/releases/download/v1.1159.0/snyk-linux\"\n        chmod +x snyk\n        ls -lrt\n        echo \"----------Authenticating Snyk-----------\"\n        ./snyk auth ${{secrets.Snyk_token}}\n        echo \"----------Snyk Monitor-----------\"\n        ./snyk monitor --all-projects\n        echo \"----------Snyk Scanning-----------\"\n        ./snyk test --all-projects\n        echo \"-----------Snyk Security Gating-----------\"\n        snykCount=$(curl -X GET --header 'Content-Type: application/json' --header 'Authorization: token ${{secrets.Snyk_token}}' 'https://api.snyk.io/api/v1/org/&lt;org id&gt;/project/&lt;project id&gt;')\n        CRITICAL=$(echo \"$snykCount\" | jq .issueCountsBySeverity.critical )\n        HIGH=$(echo \"$snykCount\" | jq .issueCountsBySeverity.high )\n        MEDIUM=$(echo \"$snykCount\" | jq .issueCountsBySeverity.medium )\n        LOW=$(echo \"$snykCount\" | jq .issueCountsBySeverity.low )\n        echo \"CRITICAL = $CRITICAL\"\n        echo \"HIGH = $HIGH\"\n        echo \"MEDIUM = $MEDIUM\"\n        echo \"LOW = $LOW\"\n        if [ $CRITICAL -gt 0 ]\n        then\n          curl -H 'Content-Type: application/json' -d '{\"text\": \"Application has Critical Issues in Snyk\"}' ${{secrets.TEAMS_WEBHOOK}}\n          echo \"##[error]Application has critical issues\"\n          #exit 1\n        elif [ $HIGH -gt 0 ]\n        then\n          curl -H 'Content-Type: application/json' -d '{\"text\": \"Application has High Issues in Snyk\"}' ${{secrets.TEAMS_WEBHOOK}}\n          echo \"##[error]Application has High issues\"\n          #exit 1\n        else\n          echo \"PASSED\"\n        fi\n\nNote: To enforce security gating in block mode please uncomment exit code 1.\n</code></pre> <p>Sample screenshot of Snyk execution and results:</p> <p>IMAGE</p>"},{"location":"Tools/Snyk/#jenkins","title":"Jenkins","text":"<p>Step 1: Store Service Account token in Azure KeyVault.</p> <p>Step 2: Create a service principal and store that as a jenkins secret to retrieve the secret from the azure keyvault</p> <p>Step 3: Create a Jenkins pipeline with the below stages.</p> <pre><code>pipeline {\n  agent any\n  stages {\n    stage('Git Checkout'){\n            steps {\n                checkout([$class: 'GitSCM', branches: [[name: '&lt;branch_name&gt;']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '&lt;Github_credential_name&gt;', url: '&lt;Github_url&gt;']]])\n                }\n    }\n   stage (\"Retrieving snyk secret from the Azure key Vault\") {\n     options{\n                azureKeyVault(\n\u200b\n                    credentialID: '&lt;AzureKuyVault_credential_name&gt;',\n\u200b\n                    keyVaultURL: '&lt;KeyVault_url&gt;',\n\u200b\n                    secrets: [\n\u200b\n                        [envVariable: 'snyktoken', name: '&lt;AKV_snyk_token_name&gt;', secretType: 'Secret']\n\u200b\n                        ]\n                        )\n     }\n      steps {\n\u200b\n          sh \"\"\"\n                  set -eu -o pipefail\n                  rm -rf snyk\n\n                  curl -Lo ./snyk \"https://github.com/snyk/snyk/releases/download/v1.1159.0/snyk-linux\"\n\n                  ls -lrt\n\n                  chmod +x snyk\n                  ls -lrt\n                  ./snyk -v\n                  ./snyk auth ${snyktoken}\n\n                  ./snyk monitor --all-projects\n\n                  ./snyk test --all-projects\n\n                  \"\"\"\n\n        }\n      }\n}\n\u200b\n}\n</code></pre> <p>\u200b Sample screenshot of Snyk execution and results:</p> <p>IMAGE</p>"},{"location":"Tools/Snyk/#concourse-ci","title":"Concourse CI","text":"<p>Step 1: GitHub and Snyk details should be updated in the Hashicorp Vault. (Don't hard code username and password values in the pipeline)</p> <p>Use below variables to pass secrets in the pipeline.</p> <p>github.username - Github Username github.personal_access_token - Github PAT Token \u200b\u200b\u200b\u200b\u200b\u200b\u200bsnyk_cli.token - Snyk's API token All the variable fields are configured in Hashicorp vault for reusability and manage the secrets ((Hashicorp vault variable)).</p> <p>For steps to create a secret keys in HC Vault, refer here.</p> <p>Step 2: Create a pipeline.yml with following code</p> <pre><code>resources:\n  - name: source-code\n    type: git\n    source:\n      uri: &lt;Github_Url&gt;\n      branch: &lt;branch_name&gt;\n      username: ((github.username))\n      password: ((github.personal_access_token))\n\u200b\njobs:\n  - name: source-code\n    public: false\n    plan:\n      - get: source-code\n        trigger: true\n      - task: Snyk_SCA_Scanning\n        config:\n          platform: linux\n          image_resource:\n            type: registry-image\n            source: { repository: ubuntu, tag: \"18.04\" }\n          inputs:\n            - name: source-code\n          run:\n            path: /bin/sh\n            args:\n              - -c\n              - |\n                echo \"----------Installing Dependency - Curl-----------\"\n                apt-get update\n                apt-get -y install curl\n                curl --version\n                echo \"----------Downloading Snyk-----------\"\n                curl -Lo ./snyk \"https://github.com/snyk/snyk/releases/download/v1.1159.0/snyk-linux\"\n                chmod +x snyk\n                ls -lrt\n                echo \"----------Authenticating Snyk-----------\"\n                ./snyk auth ((snyk_cli.token))\n                echo \"----------Snyk Monitor-----------\"\n                ./snyk monitor --all-projects\n                status=$?\n                echo \"----------Snyk Scanning-----------\"\n                ./snyk test --all-projects\n\u200b\n</code></pre>"},{"location":"Tools/Snyk/#product-features","title":"Product Features","text":"<ul> <li>Snyk tool creates inventory of all open-source components used.</li> <li> <p>Snyk tool identifies the known vulnerabilities in the open-source components used.</p> </li> <li> <p>Snyk tool helps in remediating the vulnerable components providing fix recommendations.</p> </li> <li> <p>Find and fix vulnerabilities in application code in real-time during the development process.\u200b\u200b\u200b\u200b\u200b\u200b\u200b</p> </li> <li>Application security at scale requires developers to be the first step in the security process. Snyk\u2019s platform is purpose-built to be easily used by developers to build software securely.</li> <li>The Snyk Intel vulnerability database is maintained by a dedicated research team that combines public sources, contributions from the developer community and academia, proprietary research and machine learning.</li> <li>Snyk will integrated with major repositories like GitHub and major CICD tools like Azure Devops, Jenkins, Concourse, etc...</li> </ul>"},{"location":"Tools/Snyk/#architecture","title":"Architecture","text":""},{"location":"Tools/ToolsAndServices/","title":"Tooling And Services","text":"<p>...</p> Scan Type Functionality Toolset Static Application Security Testing (SAST): Scan of application source code is conducted FOD Software Composition Analysis (SCA): Scan of third party and open-source components is conducted (Dependency scan) Snyk Dynamic Application Security Testing (DAST): Dynamic scan of web applications is conducted FOD Container and Image Scans Container and Image scans are conducted and provides runtime protection. Prisma Cloud Secret Scan Analyze &amp; find secrets such as private keys, passwords, certificates in the organization\u2019s resource TruffleHog IAC Scanning Infrastructure as a code files are scanned Prisma Cloud Defender for Cloud Cloud Posture management and compliance through secure score scanning Azure Defender for cloud Azure PIM Akamai WAF and DDOS - Volumetric Edge protection for applications Akamai <p>...</p>"},{"location":"Tools/Trufflehog/","title":"Trufflehog","text":"<p>At M&amp;S Trufflehog is being used to scan the repositories to find leaked secrets</p>"}]}